(() => {
  function t(t, n, e, r) {
    Object.defineProperty(t, n, {
      get: e,
      set: r,
      enumerable: !0,
      configurable: !0
    });
  }
  var n = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : "undefined" != typeof window ? window : "undefined" != typeof global ? global : {};
  function e(t) {
    return t && t.__esModule ? t.default : t;
  }
  var r = {}, a = {}, i = n.parcelRequire94c2;
  null == i && ((i = function(t) {
    if (t in r) return r[t].exports;
    if (t in a) {
      var n = a[t];
      delete a[t];
      var e = {
        id: t,
        exports: {}
      };
      return r[t] = e, n.call(e.exports, e, e.exports), e.exports;
    }
    var i = new Error("Cannot find module '" + t + "'");
    throw i.code = "MODULE_NOT_FOUND", i;
  }).register = function(t, n) {
    a[t] = n;
  }, n.parcelRequire94c2 = i), i.register("aCBW2", (function(n, e) {
    var r, a;
    t(n.exports, "register", (() => r), (t => r = t)), t(n.exports, "resolve", (() => a), (t => a = t));
    var i = {};
    r = function(t) {
      for (var n = Object.keys(t), e = 0; e < n.length; e++) i[n[e]] = t[n[e]];
    }, a = function(t) {
      var n = i[t];
      if (null == n) throw new Error("Could not resolve bundle with id " + t);
      return n;
    };
  })), i.register("1t74G", (function(t, n) {
    var e;
    "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self && self, 
    e = function(t) {
      "use strict";
      if ("undefined" == typeof browser || Object.getPrototypeOf(browser) !== Object.prototype) {
        const n = "The message port closed before a response was received.", e = "Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)", r = t => {
          const r = {
            alarms: {
              clear: {
                minArgs: 0,
                maxArgs: 1
              },
              clearAll: {
                minArgs: 0,
                maxArgs: 0
              },
              get: {
                minArgs: 0,
                maxArgs: 1
              },
              getAll: {
                minArgs: 0,
                maxArgs: 0
              }
            },
            bookmarks: {
              create: {
                minArgs: 1,
                maxArgs: 1
              },
              get: {
                minArgs: 1,
                maxArgs: 1
              },
              getChildren: {
                minArgs: 1,
                maxArgs: 1
              },
              getRecent: {
                minArgs: 1,
                maxArgs: 1
              },
              getSubTree: {
                minArgs: 1,
                maxArgs: 1
              },
              getTree: {
                minArgs: 0,
                maxArgs: 0
              },
              move: {
                minArgs: 2,
                maxArgs: 2
              },
              remove: {
                minArgs: 1,
                maxArgs: 1
              },
              removeTree: {
                minArgs: 1,
                maxArgs: 1
              },
              search: {
                minArgs: 1,
                maxArgs: 1
              },
              update: {
                minArgs: 2,
                maxArgs: 2
              }
            },
            browserAction: {
              disable: {
                minArgs: 0,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              enable: {
                minArgs: 0,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              getBadgeBackgroundColor: {
                minArgs: 1,
                maxArgs: 1
              },
              getBadgeText: {
                minArgs: 1,
                maxArgs: 1
              },
              getPopup: {
                minArgs: 1,
                maxArgs: 1
              },
              getTitle: {
                minArgs: 1,
                maxArgs: 1
              },
              openPopup: {
                minArgs: 0,
                maxArgs: 0
              },
              setBadgeBackgroundColor: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              setBadgeText: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              setIcon: {
                minArgs: 1,
                maxArgs: 1
              },
              setPopup: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              setTitle: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              }
            },
            browsingData: {
              remove: {
                minArgs: 2,
                maxArgs: 2
              },
              removeCache: {
                minArgs: 1,
                maxArgs: 1
              },
              removeCookies: {
                minArgs: 1,
                maxArgs: 1
              },
              removeDownloads: {
                minArgs: 1,
                maxArgs: 1
              },
              removeFormData: {
                minArgs: 1,
                maxArgs: 1
              },
              removeHistory: {
                minArgs: 1,
                maxArgs: 1
              },
              removeLocalStorage: {
                minArgs: 1,
                maxArgs: 1
              },
              removePasswords: {
                minArgs: 1,
                maxArgs: 1
              },
              removePluginData: {
                minArgs: 1,
                maxArgs: 1
              },
              settings: {
                minArgs: 0,
                maxArgs: 0
              }
            },
            commands: {
              getAll: {
                minArgs: 0,
                maxArgs: 0
              }
            },
            contextMenus: {
              remove: {
                minArgs: 1,
                maxArgs: 1
              },
              removeAll: {
                minArgs: 0,
                maxArgs: 0
              },
              update: {
                minArgs: 2,
                maxArgs: 2
              }
            },
            cookies: {
              get: {
                minArgs: 1,
                maxArgs: 1
              },
              getAll: {
                minArgs: 1,
                maxArgs: 1
              },
              getAllCookieStores: {
                minArgs: 0,
                maxArgs: 0
              },
              remove: {
                minArgs: 1,
                maxArgs: 1
              },
              set: {
                minArgs: 1,
                maxArgs: 1
              }
            },
            devtools: {
              inspectedWindow: {
                eval: {
                  minArgs: 1,
                  maxArgs: 2,
                  singleCallbackArg: !1
                }
              },
              panels: {
                create: {
                  minArgs: 3,
                  maxArgs: 3,
                  singleCallbackArg: !0
                },
                elements: {
                  createSidebarPane: {
                    minArgs: 1,
                    maxArgs: 1
                  }
                }
              }
            },
            downloads: {
              cancel: {
                minArgs: 1,
                maxArgs: 1
              },
              download: {
                minArgs: 1,
                maxArgs: 1
              },
              erase: {
                minArgs: 1,
                maxArgs: 1
              },
              getFileIcon: {
                minArgs: 1,
                maxArgs: 2
              },
              open: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              pause: {
                minArgs: 1,
                maxArgs: 1
              },
              removeFile: {
                minArgs: 1,
                maxArgs: 1
              },
              resume: {
                minArgs: 1,
                maxArgs: 1
              },
              search: {
                minArgs: 1,
                maxArgs: 1
              },
              show: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              }
            },
            extension: {
              isAllowedFileSchemeAccess: {
                minArgs: 0,
                maxArgs: 0
              },
              isAllowedIncognitoAccess: {
                minArgs: 0,
                maxArgs: 0
              }
            },
            history: {
              addUrl: {
                minArgs: 1,
                maxArgs: 1
              },
              deleteAll: {
                minArgs: 0,
                maxArgs: 0
              },
              deleteRange: {
                minArgs: 1,
                maxArgs: 1
              },
              deleteUrl: {
                minArgs: 1,
                maxArgs: 1
              },
              getVisits: {
                minArgs: 1,
                maxArgs: 1
              },
              search: {
                minArgs: 1,
                maxArgs: 1
              }
            },
            i18n: {
              detectLanguage: {
                minArgs: 1,
                maxArgs: 1
              },
              getAcceptLanguages: {
                minArgs: 0,
                maxArgs: 0
              }
            },
            identity: {
              launchWebAuthFlow: {
                minArgs: 1,
                maxArgs: 1
              }
            },
            idle: {
              queryState: {
                minArgs: 1,
                maxArgs: 1
              }
            },
            management: {
              get: {
                minArgs: 1,
                maxArgs: 1
              },
              getAll: {
                minArgs: 0,
                maxArgs: 0
              },
              getSelf: {
                minArgs: 0,
                maxArgs: 0
              },
              setEnabled: {
                minArgs: 2,
                maxArgs: 2
              },
              uninstallSelf: {
                minArgs: 0,
                maxArgs: 1
              }
            },
            notifications: {
              clear: {
                minArgs: 1,
                maxArgs: 1
              },
              create: {
                minArgs: 1,
                maxArgs: 2
              },
              getAll: {
                minArgs: 0,
                maxArgs: 0
              },
              getPermissionLevel: {
                minArgs: 0,
                maxArgs: 0
              },
              update: {
                minArgs: 2,
                maxArgs: 2
              }
            },
            pageAction: {
              getPopup: {
                minArgs: 1,
                maxArgs: 1
              },
              getTitle: {
                minArgs: 1,
                maxArgs: 1
              },
              hide: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              setIcon: {
                minArgs: 1,
                maxArgs: 1
              },
              setPopup: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              setTitle: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              },
              show: {
                minArgs: 1,
                maxArgs: 1,
                fallbackToNoCallback: !0
              }
            },
            permissions: {
              contains: {
                minArgs: 1,
                maxArgs: 1
              },
              getAll: {
                minArgs: 0,
                maxArgs: 0
              },
              remove: {
                minArgs: 1,
                maxArgs: 1
              },
              request: {
                minArgs: 1,
                maxArgs: 1
              }
            },
            runtime: {
              getBackgroundPage: {
                minArgs: 0,
                maxArgs: 0
              },
              getPlatformInfo: {
                minArgs: 0,
                maxArgs: 0
              },
              openOptionsPage: {
                minArgs: 0,
                maxArgs: 0
              },
              requestUpdateCheck: {
                minArgs: 0,
                maxArgs: 0
              },
              sendMessage: {
                minArgs: 1,
                maxArgs: 3
              },
              sendNativeMessage: {
                minArgs: 2,
                maxArgs: 2
              },
              setUninstallURL: {
                minArgs: 1,
                maxArgs: 1
              }
            },
            sessions: {
              getDevices: {
                minArgs: 0,
                maxArgs: 1
              },
              getRecentlyClosed: {
                minArgs: 0,
                maxArgs: 1
              },
              restore: {
                minArgs: 0,
                maxArgs: 1
              }
            },
            storage: {
              local: {
                clear: {
                  minArgs: 0,
                  maxArgs: 0
                },
                get: {
                  minArgs: 0,
                  maxArgs: 1
                },
                getBytesInUse: {
                  minArgs: 0,
                  maxArgs: 1
                },
                remove: {
                  minArgs: 1,
                  maxArgs: 1
                },
                set: {
                  minArgs: 1,
                  maxArgs: 1
                }
              },
              managed: {
                get: {
                  minArgs: 0,
                  maxArgs: 1
                },
                getBytesInUse: {
                  minArgs: 0,
                  maxArgs: 1
                }
              },
              sync: {
                clear: {
                  minArgs: 0,
                  maxArgs: 0
                },
                get: {
                  minArgs: 0,
                  maxArgs: 1
                },
                getBytesInUse: {
                  minArgs: 0,
                  maxArgs: 1
                },
                remove: {
                  minArgs: 1,
                  maxArgs: 1
                },
                set: {
                  minArgs: 1,
                  maxArgs: 1
                }
              }
            },
            tabs: {
              captureVisibleTab: {
                minArgs: 0,
                maxArgs: 2
              },
              create: {
                minArgs: 1,
                maxArgs: 1
              },
              detectLanguage: {
                minArgs: 0,
                maxArgs: 1
              },
              discard: {
                minArgs: 0,
                maxArgs: 1
              },
              duplicate: {
                minArgs: 1,
                maxArgs: 1
              },
              executeScript: {
                minArgs: 1,
                maxArgs: 2
              },
              get: {
                minArgs: 1,
                maxArgs: 1
              },
              getCurrent: {
                minArgs: 0,
                maxArgs: 0
              },
              getZoom: {
                minArgs: 0,
                maxArgs: 1
              },
              getZoomSettings: {
                minArgs: 0,
                maxArgs: 1
              },
              goBack: {
                minArgs: 0,
                maxArgs: 1
              },
              goForward: {
                minArgs: 0,
                maxArgs: 1
              },
              highlight: {
                minArgs: 1,
                maxArgs: 1
              },
              insertCSS: {
                minArgs: 1,
                maxArgs: 2
              },
              move: {
                minArgs: 2,
                maxArgs: 2
              },
              query: {
                minArgs: 1,
                maxArgs: 1
              },
              reload: {
                minArgs: 0,
                maxArgs: 2
              },
              remove: {
                minArgs: 1,
                maxArgs: 1
              },
              removeCSS: {
                minArgs: 1,
                maxArgs: 2
              },
              sendMessage: {
                minArgs: 2,
                maxArgs: 3
              },
              setZoom: {
                minArgs: 1,
                maxArgs: 2
              },
              setZoomSettings: {
                minArgs: 1,
                maxArgs: 2
              },
              update: {
                minArgs: 1,
                maxArgs: 2
              }
            },
            topSites: {
              get: {
                minArgs: 0,
                maxArgs: 0
              }
            },
            webNavigation: {
              getAllFrames: {
                minArgs: 1,
                maxArgs: 1
              },
              getFrame: {
                minArgs: 1,
                maxArgs: 1
              }
            },
            webRequest: {
              handlerBehaviorChanged: {
                minArgs: 0,
                maxArgs: 0
              }
            },
            windows: {
              create: {
                minArgs: 0,
                maxArgs: 1
              },
              get: {
                minArgs: 1,
                maxArgs: 2
              },
              getAll: {
                minArgs: 0,
                maxArgs: 1
              },
              getCurrent: {
                minArgs: 0,
                maxArgs: 1
              },
              getLastFocused: {
                minArgs: 0,
                maxArgs: 1
              },
              remove: {
                minArgs: 1,
                maxArgs: 1
              },
              update: {
                minArgs: 2,
                maxArgs: 2
              }
            }
          };
          if (0 === Object.keys(r).length) throw new Error("api-metadata.json has not been included in browser-polyfill");
          class a extends WeakMap {
            constructor(t, n) {
              super(n), this.createItem = t;
            }
            get(t) {
              return this.has(t) || this.set(t, this.createItem(t)), super.get(t);
            }
          }
          const i = (n, e) => (...r) => {
            t.runtime.lastError ? n.reject(new Error(t.runtime.lastError.message)) : e.singleCallbackArg || r.length <= 1 && !1 !== e.singleCallbackArg ? n.resolve(r[0]) : n.resolve(r);
          }, o = t => 1 == t ? "argument" : "arguments", u = (t, n, e) => new Proxy(n, {
            apply: (n, r, a) => e.call(r, t, ...a)
          });
          let s = Function.call.bind(Object.prototype.hasOwnProperty);
          const c = (t, n = {}, e = {}) => {
            let r = Object.create(null), a = {
              has: (n, e) => e in t || e in r,
              get(a, l, f) {
                if (l in r) return r[l];
                if (!(l in t)) return;
                let h = t[l];
                if ("function" == typeof h) if ("function" == typeof n[l]) h = u(t, t[l], n[l]); else if (s(e, l)) {
                  let n = ((t, n) => function(e, ...r) {
                    if (r.length < n.minArgs) throw new Error(`Expected at least ${n.minArgs} ${o(n.minArgs)} for ${t}(), got ${r.length}`);
                    if (r.length > n.maxArgs) throw new Error(`Expected at most ${n.maxArgs} ${o(n.maxArgs)} for ${t}(), got ${r.length}`);
                    return new Promise(((a, o) => {
                      if (n.fallbackToNoCallback) try {
                        e[t](...r, i({
                          resolve: a,
                          reject: o
                        }, n));
                      } catch (i) {
                        console.warn(`${t} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `, i), 
                        e[t](...r), n.fallbackToNoCallback = !1, n.noCallback = !0, a();
                      } else n.noCallback ? (e[t](...r), a()) : e[t](...r, i({
                        resolve: a,
                        reject: o
                      }, n));
                    }));
                  })(l, e[l]);
                  h = u(t, t[l], n);
                } else h = h.bind(t); else if ("object" == typeof h && null !== h && (s(n, l) || s(e, l))) h = c(h, n[l], e[l]); else {
                  if (!s(e, "*")) return Object.defineProperty(r, l, {
                    configurable: !0,
                    enumerable: !0,
                    get: () => t[l],
                    set(n) {
                      t[l] = n;
                    }
                  }), h;
                  h = c(h, n[l], e["*"]);
                }
                return r[l] = h, h;
              },
              set: (n, e, a, i) => (e in r ? r[e] = a : t[e] = a, !0),
              defineProperty: (t, n, e) => Reflect.defineProperty(r, n, e),
              deleteProperty: (t, n) => Reflect.deleteProperty(r, n)
            }, l = Object.create(t);
            return new Proxy(l, a);
          }, l = t => ({
            addListener(n, e, ...r) {
              n.addListener(t.get(e), ...r);
            },
            hasListener: (n, e) => n.hasListener(t.get(e)),
            removeListener(n, e) {
              n.removeListener(t.get(e));
            }
          }), f = new a((t => "function" != typeof t ? t : function(n) {
            const e = c(n, {}, {
              getContent: {
                minArgs: 0,
                maxArgs: 0
              }
            });
            t(e);
          }));
          let h = !1;
          const g = new a((t => "function" != typeof t ? t : function(n, r, a) {
            let i, o, u = !1, s = new Promise((t => {
              i = function(n) {
                h || (console.warn(e, (new Error).stack), h = !0), u = !0, t(n);
              };
            }));
            try {
              o = t(n, r, i);
            } catch (t) {
              o = Promise.reject(t);
            }
            const c = !0 !== o && (l = o) && "object" == typeof l && "function" == typeof l.then;
            var l;
            if (!0 !== o && !c && !u) return !1;
            const f = t => {
              t.then((t => {
                a(t);
              }), (t => {
                let n;
                n = t && (t instanceof Error || "string" == typeof t.message) ? t.message : "An unexpected error occurred", 
                a({
                  __mozWebExtensionPolyfillReject__: !0,
                  message: n
                });
              })).catch((t => {
                console.error("Failed to send onMessage rejected reply", t);
              }));
            };
            return f(c ? o : s), !0;
          })), p = ({reject: e, resolve: r}, a) => {
            t.runtime.lastError ? t.runtime.lastError.message === n ? r() : e(new Error(t.runtime.lastError.message)) : a && a.__mozWebExtensionPolyfillReject__ ? e(new Error(a.message)) : r(a);
          }, d = (t, n, e, ...r) => {
            if (r.length < n.minArgs) throw new Error(`Expected at least ${n.minArgs} ${o(n.minArgs)} for ${t}(), got ${r.length}`);
            if (r.length > n.maxArgs) throw new Error(`Expected at most ${n.maxArgs} ${o(n.maxArgs)} for ${t}(), got ${r.length}`);
            return new Promise(((t, n) => {
              const a = p.bind(null, {
                resolve: t,
                reject: n
              });
              r.push(a), e.sendMessage(...r);
            }));
          }, m = {
            devtools: {
              network: {
                onRequestFinished: l(f)
              }
            },
            runtime: {
              onMessage: l(g),
              onMessageExternal: l(g),
              sendMessage: d.bind(null, "sendMessage", {
                minArgs: 1,
                maxArgs: 3
              })
            },
            tabs: {
              sendMessage: d.bind(null, "sendMessage", {
                minArgs: 2,
                maxArgs: 3
              })
            }
          }, v = {
            clear: {
              minArgs: 1,
              maxArgs: 1
            },
            get: {
              minArgs: 1,
              maxArgs: 1
            },
            set: {
              minArgs: 1,
              maxArgs: 1
            }
          };
          return r.privacy = {
            network: {
              "*": v
            },
            services: {
              "*": v
            },
            websites: {
              "*": v
            }
          }, c(t, m, r);
        };
        if ("object" != typeof chrome || !chrome || !chrome.runtime || !chrome.runtime.id) throw new Error("This script should only be loaded in a browser extension.");
        t.exports = r(chrome);
      } else t.exports = browser;
    }, "function" == typeof define && define.amd ? define("webextension-polyfill", [ "module" ], e) : e(t);
  })), i.register("bbtrO", (function(n, e) {
    var r;
    t(n.exports, "getBundleURL", (() => r), (t => r = t));
    var a = {};
    function i(t) {
      return ("" + t).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/.+)\/[^/]+$/, "$1") + "/";
    }
    r = function(t) {
      var n = a[t];
      return n || (n = function() {
        try {
          throw new Error;
        } catch (n) {
          var t = ("" + n.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^)\n]+/g);
          if (t) return i(t[2]);
        }
        return "/";
      }(), a[t] = n), n;
    };
  })), i.register("jE1ev", (function(t, e) {
    (function() {
      var r, a = "Expected a function", i = "__lodash_hash_undefined__", o = "__lodash_placeholder__", u = 16, s = 32, c = 64, l = 128, f = 256, h = 1 / 0, g = 9007199254740991, p = NaN, d = 4294967295, m = [ [ "ary", l ], [ "bind", 1 ], [ "bindKey", 2 ], [ "curry", 8 ], [ "curryRight", u ], [ "flip", 512 ], [ "partial", s ], [ "partialRight", c ], [ "rearg", f ] ], v = "[object Arguments]", y = "[object Array]", b = "[object Boolean]", w = "[object Date]", _ = "[object Error]", x = "[object Function]", A = "[object GeneratorFunction]", k = "[object Map]", j = "[object Number]", T = "[object Object]", M = "[object Promise]", C = "[object RegExp]", I = "[object Set]", E = "[object String]", S = "[object Symbol]", z = "[object WeakMap]", O = "[object ArrayBuffer]", R = "[object DataView]", q = "[object Float32Array]", L = "[object Float64Array]", P = "[object Int8Array]", N = "[object Int16Array]", W = "[object Int32Array]", B = "[object Uint8Array]", F = "[object Uint8ClampedArray]", U = "[object Uint16Array]", $ = "[object Uint32Array]", D = /\b__p \+= '';/g, H = /\b(__p \+=) '' \+/g, G = /(__e\(.*?\)|\b__t\)) \+\n'';/g, K = /&(?:amp|lt|gt|quot|#39);/g, Z = /[&<>"']/g, J = RegExp(K.source), X = RegExp(Z.source), V = /<%-([\s\S]+?)%>/g, Y = /<%([\s\S]+?)%>/g, Q = /<%=([\s\S]+?)%>/g, tt = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, nt = /^\w*$/, et = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, rt = /[\\^$.*+?()[\]{}|]/g, at = RegExp(rt.source), it = /^\s+/, ot = /\s/, ut = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, st = /\{\n\/\* \[wrapped with (.+)\] \*/, ct = /,? & /, lt = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g, ft = /[()=,{}\[\]\/\s]/, ht = /\\(\\)?/g, gt = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g, pt = /\w*$/, dt = /^[-+]0x[0-9a-f]+$/i, mt = /^0b[01]+$/i, vt = /^\[object .+?Constructor\]$/, yt = /^0o[0-7]+$/i, bt = /^(?:0|[1-9]\d*)$/, wt = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, _t = /($^)/, xt = /['\n\r\u2028\u2029\\]/g, At = "\ud800-\udfff", kt = "\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff", jt = "\\u2700-\\u27bf", Tt = "a-z\\xdf-\\xf6\\xf8-\\xff", Mt = "A-Z\\xc0-\\xd6\\xd8-\\xde", Ct = "\\ufe0e\\ufe0f", It = "\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", Et = "['’]", St = "[\ud800-\udfff]", zt = "[" + It + "]", Ot = "[" + kt + "]", Rt = "\\d+", qt = "[" + jt + "]", Lt = "[" + Tt + "]", Pt = "[^" + At + It + Rt + jt + Tt + Mt + "]", Nt = "\ud83c[\udffb-\udfff]", Wt = "[^\ud800-\udfff]", Bt = "(?:\ud83c[\udde6-\uddff]){2}", Ft = "[\ud800-\udbff][\udc00-\udfff]", Ut = "[" + Mt + "]", $t = "\\u200d", Dt = "(?:" + Lt + "|" + Pt + ")", Ht = "(?:" + Ut + "|" + Pt + ")", Gt = "(?:['’](?:d|ll|m|re|s|t|ve))?", Kt = "(?:['’](?:D|LL|M|RE|S|T|VE))?", Zt = "(?:" + Ot + "|" + Nt + ")" + "?", Jt = "[" + Ct + "]?", Xt = Jt + Zt + ("(?:" + $t + "(?:" + [ Wt, Bt, Ft ].join("|") + ")" + Jt + Zt + ")*"), Vt = "(?:" + [ qt, Bt, Ft ].join("|") + ")" + Xt, Yt = "(?:" + [ Wt + Ot + "?", Ot, Bt, Ft, St ].join("|") + ")", Qt = RegExp(Et, "g"), tn = RegExp(Ot, "g"), nn = RegExp(Nt + "(?=" + Nt + ")|" + Yt + Xt, "g"), en = RegExp([ Ut + "?" + Lt + "+" + Gt + "(?=" + [ zt, Ut, "$" ].join("|") + ")", Ht + "+" + Kt + "(?=" + [ zt, Ut + Dt, "$" ].join("|") + ")", Ut + "?" + Dt + "+" + Gt, Ut + "+" + Kt, "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", Rt, Vt ].join("|"), "g"), rn = RegExp("[" + $t + At + kt + Ct + "]"), an = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/, on = [ "Array", "Buffer", "DataView", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Map", "Math", "Object", "Promise", "RegExp", "Set", "String", "Symbol", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "_", "clearTimeout", "isFinite", "parseInt", "setTimeout" ], un = -1, sn = {};
      sn[q] = sn[L] = sn[P] = sn[N] = sn[W] = sn[B] = sn[F] = sn[U] = sn[$] = !0, sn[v] = sn[y] = sn[O] = sn[b] = sn[R] = sn[w] = sn[_] = sn[x] = sn[k] = sn[j] = sn[T] = sn[C] = sn[I] = sn[E] = sn[z] = !1;
      var cn = {};
      cn[v] = cn[y] = cn[O] = cn[R] = cn[b] = cn[w] = cn[q] = cn[L] = cn[P] = cn[N] = cn[W] = cn[k] = cn[j] = cn[T] = cn[C] = cn[I] = cn[E] = cn[S] = cn[B] = cn[F] = cn[U] = cn[$] = !0, 
      cn[_] = cn[x] = cn[z] = !1;
      var ln = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      }, fn = parseFloat, hn = parseInt, gn = "object" == typeof n && n && n.Object === Object && n, pn = "object" == typeof self && self && self.Object === Object && self, dn = gn || pn || Function("return this")(), mn = e && !e.nodeType && e, vn = mn && t && !t.nodeType && t, yn = vn && vn.exports === mn, bn = yn && gn.process, wn = function() {
        try {
          var t = vn && vn.require && vn.require("util").types;
          return t || bn && bn.binding && bn.binding("util");
        } catch (t) {}
      }(), _n = wn && wn.isArrayBuffer, xn = wn && wn.isDate, An = wn && wn.isMap, kn = wn && wn.isRegExp, jn = wn && wn.isSet, Tn = wn && wn.isTypedArray;
      function Mn(t, n, e) {
        switch (e.length) {
         case 0:
          return t.call(n);

         case 1:
          return t.call(n, e[0]);

         case 2:
          return t.call(n, e[0], e[1]);

         case 3:
          return t.call(n, e[0], e[1], e[2]);
        }
        return t.apply(n, e);
      }
      function Cn(t, n, e, r) {
        for (var a = -1, i = null == t ? 0 : t.length; ++a < i; ) {
          var o = t[a];
          n(r, o, e(o), t);
        }
        return r;
      }
      function In(t, n) {
        for (var e = -1, r = null == t ? 0 : t.length; ++e < r && !1 !== n(t[e], e, t); ) ;
        return t;
      }
      function En(t, n) {
        for (var e = null == t ? 0 : t.length; e-- && !1 !== n(t[e], e, t); ) ;
        return t;
      }
      function Sn(t, n) {
        for (var e = -1, r = null == t ? 0 : t.length; ++e < r; ) if (!n(t[e], e, t)) return !1;
        return !0;
      }
      function zn(t, n) {
        for (var e = -1, r = null == t ? 0 : t.length, a = 0, i = []; ++e < r; ) {
          var o = t[e];
          n(o, e, t) && (i[a++] = o);
        }
        return i;
      }
      function On(t, n) {
        return !!(null == t ? 0 : t.length) && $n(t, n, 0) > -1;
      }
      function Rn(t, n, e) {
        for (var r = -1, a = null == t ? 0 : t.length; ++r < a; ) if (e(n, t[r])) return !0;
        return !1;
      }
      function qn(t, n) {
        for (var e = -1, r = null == t ? 0 : t.length, a = Array(r); ++e < r; ) a[e] = n(t[e], e, t);
        return a;
      }
      function Ln(t, n) {
        for (var e = -1, r = n.length, a = t.length; ++e < r; ) t[a + e] = n[e];
        return t;
      }
      function Pn(t, n, e, r) {
        var a = -1, i = null == t ? 0 : t.length;
        for (r && i && (e = t[++a]); ++a < i; ) e = n(e, t[a], a, t);
        return e;
      }
      function Nn(t, n, e, r) {
        var a = null == t ? 0 : t.length;
        for (r && a && (e = t[--a]); a--; ) e = n(e, t[a], a, t);
        return e;
      }
      function Wn(t, n) {
        for (var e = -1, r = null == t ? 0 : t.length; ++e < r; ) if (n(t[e], e, t)) return !0;
        return !1;
      }
      var Bn = Kn("length");
      function Fn(t, n, e) {
        var r;
        return e(t, (function(t, e, a) {
          if (n(t, e, a)) return r = e, !1;
        })), r;
      }
      function Un(t, n, e, r) {
        for (var a = t.length, i = e + (r ? 1 : -1); r ? i-- : ++i < a; ) if (n(t[i], i, t)) return i;
        return -1;
      }
      function $n(t, n, e) {
        return n == n ? function(t, n, e) {
          var r = e - 1, a = t.length;
          for (;++r < a; ) if (t[r] === n) return r;
          return -1;
        }(t, n, e) : Un(t, Hn, e);
      }
      function Dn(t, n, e, r) {
        for (var a = e - 1, i = t.length; ++a < i; ) if (r(t[a], n)) return a;
        return -1;
      }
      function Hn(t) {
        return t != t;
      }
      function Gn(t, n) {
        var e = null == t ? 0 : t.length;
        return e ? Xn(t, n) / e : p;
      }
      function Kn(t) {
        return function(n) {
          return null == n ? r : n[t];
        };
      }
      function Zn(t) {
        return function(n) {
          return null == t ? r : t[n];
        };
      }
      function Jn(t, n, e, r, a) {
        return a(t, (function(t, a, i) {
          e = r ? (r = !1, t) : n(e, t, a, i);
        })), e;
      }
      function Xn(t, n) {
        for (var e, a = -1, i = t.length; ++a < i; ) {
          var o = n(t[a]);
          o !== r && (e = e === r ? o : e + o);
        }
        return e;
      }
      function Vn(t, n) {
        for (var e = -1, r = Array(t); ++e < t; ) r[e] = n(e);
        return r;
      }
      function Yn(t) {
        return t ? t.slice(0, de(t) + 1).replace(it, "") : t;
      }
      function Qn(t) {
        return function(n) {
          return t(n);
        };
      }
      function te(t, n) {
        return qn(n, (function(n) {
          return t[n];
        }));
      }
      function ne(t, n) {
        return t.has(n);
      }
      function ee(t, n) {
        for (var e = -1, r = t.length; ++e < r && $n(n, t[e], 0) > -1; ) ;
        return e;
      }
      function re(t, n) {
        for (var e = t.length; e-- && $n(n, t[e], 0) > -1; ) ;
        return e;
      }
      function ae(t, n) {
        for (var e = t.length, r = 0; e--; ) t[e] === n && ++r;
        return r;
      }
      var ie = Zn({
        "À": "A",
        "Á": "A",
        "Â": "A",
        "Ã": "A",
        "Ä": "A",
        "Å": "A",
        "à": "a",
        "á": "a",
        "â": "a",
        "ã": "a",
        "ä": "a",
        "å": "a",
        "Ç": "C",
        "ç": "c",
        "Ð": "D",
        "ð": "d",
        "È": "E",
        "É": "E",
        "Ê": "E",
        "Ë": "E",
        "è": "e",
        "é": "e",
        "ê": "e",
        "ë": "e",
        "Ì": "I",
        "Í": "I",
        "Î": "I",
        "Ï": "I",
        "ì": "i",
        "í": "i",
        "î": "i",
        "ï": "i",
        "Ñ": "N",
        "ñ": "n",
        "Ò": "O",
        "Ó": "O",
        "Ô": "O",
        "Õ": "O",
        "Ö": "O",
        "Ø": "O",
        "ò": "o",
        "ó": "o",
        "ô": "o",
        "õ": "o",
        "ö": "o",
        "ø": "o",
        "Ù": "U",
        "Ú": "U",
        "Û": "U",
        "Ü": "U",
        "ù": "u",
        "ú": "u",
        "û": "u",
        "ü": "u",
        "Ý": "Y",
        "ý": "y",
        "ÿ": "y",
        "Æ": "Ae",
        "æ": "ae",
        "Þ": "Th",
        "þ": "th",
        "ß": "ss",
        "Ā": "A",
        "Ă": "A",
        "Ą": "A",
        "ā": "a",
        "ă": "a",
        "ą": "a",
        "Ć": "C",
        "Ĉ": "C",
        "Ċ": "C",
        "Č": "C",
        "ć": "c",
        "ĉ": "c",
        "ċ": "c",
        "č": "c",
        "Ď": "D",
        "Đ": "D",
        "ď": "d",
        "đ": "d",
        "Ē": "E",
        "Ĕ": "E",
        "Ė": "E",
        "Ę": "E",
        "Ě": "E",
        "ē": "e",
        "ĕ": "e",
        "ė": "e",
        "ę": "e",
        "ě": "e",
        "Ĝ": "G",
        "Ğ": "G",
        "Ġ": "G",
        "Ģ": "G",
        "ĝ": "g",
        "ğ": "g",
        "ġ": "g",
        "ģ": "g",
        "Ĥ": "H",
        "Ħ": "H",
        "ĥ": "h",
        "ħ": "h",
        "Ĩ": "I",
        "Ī": "I",
        "Ĭ": "I",
        "Į": "I",
        "İ": "I",
        "ĩ": "i",
        "ī": "i",
        "ĭ": "i",
        "į": "i",
        "ı": "i",
        "Ĵ": "J",
        "ĵ": "j",
        "Ķ": "K",
        "ķ": "k",
        "ĸ": "k",
        "Ĺ": "L",
        "Ļ": "L",
        "Ľ": "L",
        "Ŀ": "L",
        "Ł": "L",
        "ĺ": "l",
        "ļ": "l",
        "ľ": "l",
        "ŀ": "l",
        "ł": "l",
        "Ń": "N",
        "Ņ": "N",
        "Ň": "N",
        "Ŋ": "N",
        "ń": "n",
        "ņ": "n",
        "ň": "n",
        "ŋ": "n",
        "Ō": "O",
        "Ŏ": "O",
        "Ő": "O",
        "ō": "o",
        "ŏ": "o",
        "ő": "o",
        "Ŕ": "R",
        "Ŗ": "R",
        "Ř": "R",
        "ŕ": "r",
        "ŗ": "r",
        "ř": "r",
        "Ś": "S",
        "Ŝ": "S",
        "Ş": "S",
        "Š": "S",
        "ś": "s",
        "ŝ": "s",
        "ş": "s",
        "š": "s",
        "Ţ": "T",
        "Ť": "T",
        "Ŧ": "T",
        "ţ": "t",
        "ť": "t",
        "ŧ": "t",
        "Ũ": "U",
        "Ū": "U",
        "Ŭ": "U",
        "Ů": "U",
        "Ű": "U",
        "Ų": "U",
        "ũ": "u",
        "ū": "u",
        "ŭ": "u",
        "ů": "u",
        "ű": "u",
        "ų": "u",
        "Ŵ": "W",
        "ŵ": "w",
        "Ŷ": "Y",
        "ŷ": "y",
        "Ÿ": "Y",
        "Ź": "Z",
        "Ż": "Z",
        "Ž": "Z",
        "ź": "z",
        "ż": "z",
        "ž": "z",
        "Ĳ": "IJ",
        "ĳ": "ij",
        "Œ": "Oe",
        "œ": "oe",
        "ŉ": "'n",
        "ſ": "s"
      }), oe = Zn({
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      });
      function ue(t) {
        return "\\" + ln[t];
      }
      function se(t) {
        return rn.test(t);
      }
      function ce(t) {
        var n = -1, e = Array(t.size);
        return t.forEach((function(t, r) {
          e[++n] = [ r, t ];
        })), e;
      }
      function le(t, n) {
        return function(e) {
          return t(n(e));
        };
      }
      function fe(t, n) {
        for (var e = -1, r = t.length, a = 0, i = []; ++e < r; ) {
          var u = t[e];
          u !== n && u !== o || (t[e] = o, i[a++] = e);
        }
        return i;
      }
      function he(t) {
        var n = -1, e = Array(t.size);
        return t.forEach((function(t) {
          e[++n] = t;
        })), e;
      }
      function ge(t) {
        return se(t) ? function(t) {
          var n = nn.lastIndex = 0;
          for (;nn.test(t); ) ++n;
          return n;
        }(t) : Bn(t);
      }
      function pe(t) {
        return se(t) ? function(t) {
          return t.match(nn) || [];
        }(t) : function(t) {
          return t.split("");
        }(t);
      }
      function de(t) {
        for (var n = t.length; n-- && ot.test(t.charAt(n)); ) ;
        return n;
      }
      var me = Zn({
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      });
      var ve = function t(n) {
        var e, ot = (n = null == n ? dn : ve.defaults(dn.Object(), n, ve.pick(dn, on))).Array, At = n.Date, kt = n.Error, jt = n.Function, Tt = n.Math, Mt = n.Object, Ct = n.RegExp, It = n.String, Et = n.TypeError, St = ot.prototype, zt = jt.prototype, Ot = Mt.prototype, Rt = n["__core-js_shared__"], qt = zt.toString, Lt = Ot.hasOwnProperty, Pt = 0, Nt = (e = /[^.]+$/.exec(Rt && Rt.keys && Rt.keys.IE_PROTO || "")) ? "Symbol(src)_1." + e : "", Wt = Ot.toString, Bt = qt.call(Mt), Ft = dn._, Ut = Ct("^" + qt.call(Lt).replace(rt, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"), $t = yn ? n.Buffer : r, Dt = n.Symbol, Ht = n.Uint8Array, Gt = $t ? $t.allocUnsafe : r, Kt = le(Mt.getPrototypeOf, Mt), Zt = Mt.create, Jt = Ot.propertyIsEnumerable, Xt = St.splice, Vt = Dt ? Dt.isConcatSpreadable : r, Yt = Dt ? Dt.iterator : r, nn = Dt ? Dt.toStringTag : r, rn = function() {
          try {
            var t = hi(Mt, "defineProperty");
            return t({}, "", {}), t;
          } catch (t) {}
        }(), ln = n.clearTimeout !== dn.clearTimeout && n.clearTimeout, gn = At && At.now !== dn.Date.now && At.now, pn = n.setTimeout !== dn.setTimeout && n.setTimeout, mn = Tt.ceil, vn = Tt.floor, bn = Mt.getOwnPropertySymbols, wn = $t ? $t.isBuffer : r, Bn = n.isFinite, Zn = St.join, ye = le(Mt.keys, Mt), be = Tt.max, we = Tt.min, _e = At.now, xe = n.parseInt, Ae = Tt.random, ke = St.reverse, je = hi(n, "DataView"), Te = hi(n, "Map"), Me = hi(n, "Promise"), Ce = hi(n, "Set"), Ie = hi(n, "WeakMap"), Ee = hi(Mt, "create"), Se = Ie && new Ie, ze = {}, Oe = Wi(je), Re = Wi(Te), qe = Wi(Me), Le = Wi(Ce), Pe = Wi(Ie), Ne = Dt ? Dt.prototype : r, We = Ne ? Ne.valueOf : r, Be = Ne ? Ne.toString : r;
        function Fe(t) {
          if (ru(t) && !Go(t) && !(t instanceof He)) {
            if (t instanceof De) return t;
            if (Lt.call(t, "__wrapped__")) return Bi(t);
          }
          return new De(t);
        }
        var Ue = function() {
          function t() {}
          return function(n) {
            if (!eu(n)) return {};
            if (Zt) return Zt(n);
            t.prototype = n;
            var e = new t;
            return t.prototype = r, e;
          };
        }();
        function $e() {}
        function De(t, n) {
          this.__wrapped__ = t, this.__actions__ = [], this.__chain__ = !!n, this.__index__ = 0, 
          this.__values__ = r;
        }
        function He(t) {
          this.__wrapped__ = t, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, 
          this.__iteratees__ = [], this.__takeCount__ = d, this.__views__ = [];
        }
        function Ge(t) {
          var n = -1, e = null == t ? 0 : t.length;
          for (this.clear(); ++n < e; ) {
            var r = t[n];
            this.set(r[0], r[1]);
          }
        }
        function Ke(t) {
          var n = -1, e = null == t ? 0 : t.length;
          for (this.clear(); ++n < e; ) {
            var r = t[n];
            this.set(r[0], r[1]);
          }
        }
        function Ze(t) {
          var n = -1, e = null == t ? 0 : t.length;
          for (this.clear(); ++n < e; ) {
            var r = t[n];
            this.set(r[0], r[1]);
          }
        }
        function Je(t) {
          var n = -1, e = null == t ? 0 : t.length;
          for (this.__data__ = new Ze; ++n < e; ) this.add(t[n]);
        }
        function Xe(t) {
          var n = this.__data__ = new Ke(t);
          this.size = n.size;
        }
        function Ve(t, n) {
          var e = Go(t), r = !e && Ho(t), a = !e && !r && Xo(t), i = !e && !r && !a && fu(t), o = e || r || a || i, u = o ? Vn(t.length, It) : [], s = u.length;
          for (var c in t) !n && !Lt.call(t, c) || o && ("length" == c || a && ("offset" == c || "parent" == c) || i && ("buffer" == c || "byteLength" == c || "byteOffset" == c) || bi(c, s)) || u.push(c);
          return u;
        }
        function Ye(t) {
          var n = t.length;
          return n ? t[Jr(0, n - 1)] : r;
        }
        function Qe(t, n) {
          return Li(Ea(t), sr(n, 0, t.length));
        }
        function tr(t) {
          return Li(Ea(t));
        }
        function nr(t, n, e) {
          (e !== r && !Uo(t[n], e) || e === r && !(n in t)) && or(t, n, e);
        }
        function er(t, n, e) {
          var a = t[n];
          Lt.call(t, n) && Uo(a, e) && (e !== r || n in t) || or(t, n, e);
        }
        function rr(t, n) {
          for (var e = t.length; e--; ) if (Uo(t[e][0], n)) return e;
          return -1;
        }
        function ar(t, n, e, r) {
          return gr(t, (function(t, a, i) {
            n(r, t, e(t), i);
          })), r;
        }
        function ir(t, n) {
          return t && Sa(n, Ou(n), t);
        }
        function or(t, n, e) {
          "__proto__" == n && rn ? rn(t, n, {
            configurable: !0,
            enumerable: !0,
            value: e,
            writable: !0
          }) : t[n] = e;
        }
        function ur(t, n) {
          for (var e = -1, a = n.length, i = ot(a), o = null == t; ++e < a; ) i[e] = o ? r : Cu(t, n[e]);
          return i;
        }
        function sr(t, n, e) {
          return t == t && (e !== r && (t = t <= e ? t : e), n !== r && (t = t >= n ? t : n)), 
          t;
        }
        function cr(t, n, e, a, i, o) {
          var u, s = 1 & n, c = 2 & n, l = 4 & n;
          if (e && (u = i ? e(t, a, i, o) : e(t)), u !== r) return u;
          if (!eu(t)) return t;
          var f = Go(t);
          if (f) {
            if (u = function(t) {
              var n = t.length, e = new t.constructor(n);
              n && "string" == typeof t[0] && Lt.call(t, "index") && (e.index = t.index, e.input = t.input);
              return e;
            }(t), !s) return Ea(t, u);
          } else {
            var h = di(t), g = h == x || h == A;
            if (Xo(t)) return ka(t, s);
            if (h == T || h == v || g && !i) {
              if (u = c || g ? {} : vi(t), !s) return c ? function(t, n) {
                return Sa(t, pi(t), n);
              }(t, function(t, n) {
                return t && Sa(n, Ru(n), t);
              }(u, t)) : function(t, n) {
                return Sa(t, gi(t), n);
              }(t, ir(u, t));
            } else {
              if (!cn[h]) return i ? t : {};
              u = function(t, n, e) {
                var r = t.constructor;
                switch (n) {
                 case O:
                  return ja(t);

                 case b:
                 case w:
                  return new r(+t);

                 case R:
                  return function(t, n) {
                    var e = n ? ja(t.buffer) : t.buffer;
                    return new t.constructor(e, t.byteOffset, t.byteLength);
                  }(t, e);

                 case q:
                 case L:
                 case P:
                 case N:
                 case W:
                 case B:
                 case F:
                 case U:
                 case $:
                  return Ta(t, e);

                 case k:
                  return new r;

                 case j:
                 case E:
                  return new r(t);

                 case C:
                  return function(t) {
                    var n = new t.constructor(t.source, pt.exec(t));
                    return n.lastIndex = t.lastIndex, n;
                  }(t);

                 case I:
                  return new r;

                 case S:
                  return a = t, We ? Mt(We.call(a)) : {};
                }
                var a;
              }(t, h, s);
            }
          }
          o || (o = new Xe);
          var p = o.get(t);
          if (p) return p;
          o.set(t, u), su(t) ? t.forEach((function(r) {
            u.add(cr(r, n, e, r, t, o));
          })) : au(t) && t.forEach((function(r, a) {
            u.set(a, cr(r, n, e, a, t, o));
          }));
          var d = f ? r : (l ? c ? ii : ai : c ? Ru : Ou)(t);
          return In(d || t, (function(r, a) {
            d && (r = t[a = r]), er(u, a, cr(r, n, e, a, t, o));
          })), u;
        }
        function lr(t, n, e) {
          var a = e.length;
          if (null == t) return !a;
          for (t = Mt(t); a--; ) {
            var i = e[a], o = n[i], u = t[i];
            if (u === r && !(i in t) || !o(u)) return !1;
          }
          return !0;
        }
        function fr(t, n, e) {
          if ("function" != typeof t) throw new Et(a);
          return zi((function() {
            t.apply(r, e);
          }), n);
        }
        function hr(t, n, e, r) {
          var a = -1, i = On, o = !0, u = t.length, s = [], c = n.length;
          if (!u) return s;
          e && (n = qn(n, Qn(e))), r ? (i = Rn, o = !1) : n.length >= 200 && (i = ne, o = !1, 
          n = new Je(n));
          t: for (;++a < u; ) {
            var l = t[a], f = null == e ? l : e(l);
            if (l = r || 0 !== l ? l : 0, o && f == f) {
              for (var h = c; h--; ) if (n[h] === f) continue t;
              s.push(l);
            } else i(n, f, r) || s.push(l);
          }
          return s;
        }
        Fe.templateSettings = {
          escape: V,
          evaluate: Y,
          interpolate: Q,
          variable: "",
          imports: {
            _: Fe
          }
        }, Fe.prototype = $e.prototype, Fe.prototype.constructor = Fe, De.prototype = Ue($e.prototype), 
        De.prototype.constructor = De, He.prototype = Ue($e.prototype), He.prototype.constructor = He, 
        Ge.prototype.clear = function() {
          this.__data__ = Ee ? Ee(null) : {}, this.size = 0;
        }, Ge.prototype.delete = function(t) {
          var n = this.has(t) && delete this.__data__[t];
          return this.size -= n ? 1 : 0, n;
        }, Ge.prototype.get = function(t) {
          var n = this.__data__;
          if (Ee) {
            var e = n[t];
            return e === i ? r : e;
          }
          return Lt.call(n, t) ? n[t] : r;
        }, Ge.prototype.has = function(t) {
          var n = this.__data__;
          return Ee ? n[t] !== r : Lt.call(n, t);
        }, Ge.prototype.set = function(t, n) {
          var e = this.__data__;
          return this.size += this.has(t) ? 0 : 1, e[t] = Ee && n === r ? i : n, this;
        }, Ke.prototype.clear = function() {
          this.__data__ = [], this.size = 0;
        }, Ke.prototype.delete = function(t) {
          var n = this.__data__, e = rr(n, t);
          return !(e < 0) && (e == n.length - 1 ? n.pop() : Xt.call(n, e, 1), --this.size, 
          !0);
        }, Ke.prototype.get = function(t) {
          var n = this.__data__, e = rr(n, t);
          return e < 0 ? r : n[e][1];
        }, Ke.prototype.has = function(t) {
          return rr(this.__data__, t) > -1;
        }, Ke.prototype.set = function(t, n) {
          var e = this.__data__, r = rr(e, t);
          return r < 0 ? (++this.size, e.push([ t, n ])) : e[r][1] = n, this;
        }, Ze.prototype.clear = function() {
          this.size = 0, this.__data__ = {
            hash: new Ge,
            map: new (Te || Ke),
            string: new Ge
          };
        }, Ze.prototype.delete = function(t) {
          var n = li(this, t).delete(t);
          return this.size -= n ? 1 : 0, n;
        }, Ze.prototype.get = function(t) {
          return li(this, t).get(t);
        }, Ze.prototype.has = function(t) {
          return li(this, t).has(t);
        }, Ze.prototype.set = function(t, n) {
          var e = li(this, t), r = e.size;
          return e.set(t, n), this.size += e.size == r ? 0 : 1, this;
        }, Je.prototype.add = Je.prototype.push = function(t) {
          return this.__data__.set(t, i), this;
        }, Je.prototype.has = function(t) {
          return this.__data__.has(t);
        }, Xe.prototype.clear = function() {
          this.__data__ = new Ke, this.size = 0;
        }, Xe.prototype.delete = function(t) {
          var n = this.__data__, e = n.delete(t);
          return this.size = n.size, e;
        }, Xe.prototype.get = function(t) {
          return this.__data__.get(t);
        }, Xe.prototype.has = function(t) {
          return this.__data__.has(t);
        }, Xe.prototype.set = function(t, n) {
          var e = this.__data__;
          if (e instanceof Ke) {
            var r = e.__data__;
            if (!Te || r.length < 199) return r.push([ t, n ]), this.size = ++e.size, this;
            e = this.__data__ = new Ze(r);
          }
          return e.set(t, n), this.size = e.size, this;
        };
        var gr = Ra(_r), pr = Ra(xr, !0);
        function dr(t, n) {
          var e = !0;
          return gr(t, (function(t, r, a) {
            return e = !!n(t, r, a);
          })), e;
        }
        function mr(t, n, e) {
          for (var a = -1, i = t.length; ++a < i; ) {
            var o = t[a], u = n(o);
            if (null != u && (s === r ? u == u && !lu(u) : e(u, s))) var s = u, c = o;
          }
          return c;
        }
        function vr(t, n) {
          var e = [];
          return gr(t, (function(t, r, a) {
            n(t, r, a) && e.push(t);
          })), e;
        }
        function yr(t, n, e, r, a) {
          var i = -1, o = t.length;
          for (e || (e = yi), a || (a = []); ++i < o; ) {
            var u = t[i];
            n > 0 && e(u) ? n > 1 ? yr(u, n - 1, e, r, a) : Ln(a, u) : r || (a[a.length] = u);
          }
          return a;
        }
        var br = qa(), wr = qa(!0);
        function _r(t, n) {
          return t && br(t, n, Ou);
        }
        function xr(t, n) {
          return t && wr(t, n, Ou);
        }
        function Ar(t, n) {
          return zn(n, (function(n) {
            return Qo(t[n]);
          }));
        }
        function kr(t, n) {
          for (var e = 0, a = (n = wa(n, t)).length; null != t && e < a; ) t = t[Ni(n[e++])];
          return e && e == a ? t : r;
        }
        function jr(t, n, e) {
          var r = n(t);
          return Go(t) ? r : Ln(r, e(t));
        }
        function Tr(t) {
          return null == t ? t === r ? "[object Undefined]" : "[object Null]" : nn && nn in Mt(t) ? function(t) {
            var n = Lt.call(t, nn), e = t[nn];
            try {
              t[nn] = r;
              var a = !0;
            } catch (t) {}
            var i = Wt.call(t);
            a && (n ? t[nn] = e : delete t[nn]);
            return i;
          }(t) : function(t) {
            return Wt.call(t);
          }(t);
        }
        function Mr(t, n) {
          return t > n;
        }
        function Cr(t, n) {
          return null != t && Lt.call(t, n);
        }
        function Ir(t, n) {
          return null != t && n in Mt(t);
        }
        function Er(t, n, e) {
          for (var a = e ? Rn : On, i = t[0].length, o = t.length, u = o, s = ot(o), c = 1 / 0, l = []; u--; ) {
            var f = t[u];
            u && n && (f = qn(f, Qn(n))), c = we(f.length, c), s[u] = !e && (n || i >= 120 && f.length >= 120) ? new Je(u && f) : r;
          }
          f = t[0];
          var h = -1, g = s[0];
          t: for (;++h < i && l.length < c; ) {
            var p = f[h], d = n ? n(p) : p;
            if (p = e || 0 !== p ? p : 0, !(g ? ne(g, d) : a(l, d, e))) {
              for (u = o; --u; ) {
                var m = s[u];
                if (!(m ? ne(m, d) : a(t[u], d, e))) continue t;
              }
              g && g.push(d), l.push(p);
            }
          }
          return l;
        }
        function Sr(t, n, e) {
          var a = null == (t = Ci(t, n = wa(n, t))) ? t : t[Ni(Vi(n))];
          return null == a ? r : Mn(a, t, e);
        }
        function zr(t) {
          return ru(t) && Tr(t) == v;
        }
        function Or(t, n, e, a, i) {
          return t === n || (null == t || null == n || !ru(t) && !ru(n) ? t != t && n != n : function(t, n, e, a, i, o) {
            var u = Go(t), s = Go(n), c = u ? y : di(t), l = s ? y : di(n), f = (c = c == v ? T : c) == T, h = (l = l == v ? T : l) == T, g = c == l;
            if (g && Xo(t)) {
              if (!Xo(n)) return !1;
              u = !0, f = !1;
            }
            if (g && !f) return o || (o = new Xe), u || fu(t) ? ei(t, n, e, a, i, o) : function(t, n, e, r, a, i, o) {
              switch (e) {
               case R:
                if (t.byteLength != n.byteLength || t.byteOffset != n.byteOffset) return !1;
                t = t.buffer, n = n.buffer;

               case O:
                return !(t.byteLength != n.byteLength || !i(new Ht(t), new Ht(n)));

               case b:
               case w:
               case j:
                return Uo(+t, +n);

               case _:
                return t.name == n.name && t.message == n.message;

               case C:
               case E:
                return t == n + "";

               case k:
                var u = ce;

               case I:
                var s = 1 & r;
                if (u || (u = he), t.size != n.size && !s) return !1;
                var c = o.get(t);
                if (c) return c == n;
                r |= 2, o.set(t, n);
                var l = ei(u(t), u(n), r, a, i, o);
                return o.delete(t), l;

               case S:
                if (We) return We.call(t) == We.call(n);
              }
              return !1;
            }(t, n, c, e, a, i, o);
            if (!(1 & e)) {
              var p = f && Lt.call(t, "__wrapped__"), d = h && Lt.call(n, "__wrapped__");
              if (p || d) {
                var m = p ? t.value() : t, x = d ? n.value() : n;
                return o || (o = new Xe), i(m, x, e, a, o);
              }
            }
            return !!g && (o || (o = new Xe), function(t, n, e, a, i, o) {
              var u = 1 & e, s = ai(t), c = s.length, l = ai(n), f = l.length;
              if (c != f && !u) return !1;
              var h = c;
              for (;h--; ) {
                var g = s[h];
                if (!(u ? g in n : Lt.call(n, g))) return !1;
              }
              var p = o.get(t), d = o.get(n);
              if (p && d) return p == n && d == t;
              var m = !0;
              o.set(t, n), o.set(n, t);
              var v = u;
              for (;++h < c; ) {
                var y = t[g = s[h]], b = n[g];
                if (a) var w = u ? a(b, y, g, n, t, o) : a(y, b, g, t, n, o);
                if (!(w === r ? y === b || i(y, b, e, a, o) : w)) {
                  m = !1;
                  break;
                }
                v || (v = "constructor" == g);
              }
              if (m && !v) {
                var _ = t.constructor, x = n.constructor;
                _ == x || !("constructor" in t) || !("constructor" in n) || "function" == typeof _ && _ instanceof _ && "function" == typeof x && x instanceof x || (m = !1);
              }
              return o.delete(t), o.delete(n), m;
            }(t, n, e, a, i, o));
          }(t, n, e, a, Or, i));
        }
        function Rr(t, n, e, a) {
          var i = e.length, o = i, u = !a;
          if (null == t) return !o;
          for (t = Mt(t); i--; ) {
            var s = e[i];
            if (u && s[2] ? s[1] !== t[s[0]] : !(s[0] in t)) return !1;
          }
          for (;++i < o; ) {
            var c = (s = e[i])[0], l = t[c], f = s[1];
            if (u && s[2]) {
              if (l === r && !(c in t)) return !1;
            } else {
              var h = new Xe;
              if (a) var g = a(l, f, c, t, n, h);
              if (!(g === r ? Or(f, l, 3, a, h) : g)) return !1;
            }
          }
          return !0;
        }
        function qr(t) {
          return !(!eu(t) || (n = t, Nt && Nt in n)) && (Qo(t) ? Ut : vt).test(Wi(t));
          var n;
        }
        function Lr(t) {
          return "function" == typeof t ? t : null == t ? is : "object" == typeof t ? Go(t) ? Ur(t[0], t[1]) : Fr(t) : ps(t);
        }
        function Pr(t) {
          if (!ki(t)) return ye(t);
          var n = [];
          for (var e in Mt(t)) Lt.call(t, e) && "constructor" != e && n.push(e);
          return n;
        }
        function Nr(t) {
          if (!eu(t)) return function(t) {
            var n = [];
            if (null != t) for (var e in Mt(t)) n.push(e);
            return n;
          }(t);
          var n = ki(t), e = [];
          for (var r in t) ("constructor" != r || !n && Lt.call(t, r)) && e.push(r);
          return e;
        }
        function Wr(t, n) {
          return t < n;
        }
        function Br(t, n) {
          var e = -1, r = Zo(t) ? ot(t.length) : [];
          return gr(t, (function(t, a, i) {
            r[++e] = n(t, a, i);
          })), r;
        }
        function Fr(t) {
          var n = fi(t);
          return 1 == n.length && n[0][2] ? Ti(n[0][0], n[0][1]) : function(e) {
            return e === t || Rr(e, t, n);
          };
        }
        function Ur(t, n) {
          return _i(t) && ji(n) ? Ti(Ni(t), n) : function(e) {
            var a = Cu(e, t);
            return a === r && a === n ? Iu(e, t) : Or(n, a, 3);
          };
        }
        function $r(t, n, e, a, i) {
          t !== n && br(n, (function(o, u) {
            if (i || (i = new Xe), eu(o)) !function(t, n, e, a, i, o, u) {
              var s = Ei(t, e), c = Ei(n, e), l = u.get(c);
              if (l) return void nr(t, e, l);
              var f = o ? o(s, c, e + "", t, n, u) : r, h = f === r;
              if (h) {
                var g = Go(c), p = !g && Xo(c), d = !g && !p && fu(c);
                f = c, g || p || d ? Go(s) ? f = s : Jo(s) ? f = Ea(s) : p ? (h = !1, f = ka(c, !0)) : d ? (h = !1, 
                f = Ta(c, !0)) : f = [] : ou(c) || Ho(c) ? (f = s, Ho(s) ? f = bu(s) : eu(s) && !Qo(s) || (f = vi(c))) : h = !1;
              }
              h && (u.set(c, f), i(f, c, a, o, u), u.delete(c));
              nr(t, e, f);
            }(t, n, u, e, $r, a, i); else {
              var s = a ? a(Ei(t, u), o, u + "", t, n, i) : r;
              s === r && (s = o), nr(t, u, s);
            }
          }), Ru);
        }
        function Dr(t, n) {
          var e = t.length;
          if (e) return bi(n += n < 0 ? e : 0, e) ? t[n] : r;
        }
        function Hr(t, n, e) {
          n = n.length ? qn(n, (function(t) {
            return Go(t) ? function(n) {
              return kr(n, 1 === t.length ? t[0] : t);
            } : t;
          })) : [ is ];
          var r = -1;
          n = qn(n, Qn(ci()));
          var a = Br(t, (function(t, e, a) {
            var i = qn(n, (function(n) {
              return n(t);
            }));
            return {
              criteria: i,
              index: ++r,
              value: t
            };
          }));
          return function(t, n) {
            var e = t.length;
            for (t.sort(n); e--; ) t[e] = t[e].value;
            return t;
          }(a, (function(t, n) {
            return function(t, n, e) {
              var r = -1, a = t.criteria, i = n.criteria, o = a.length, u = e.length;
              for (;++r < o; ) {
                var s = Ma(a[r], i[r]);
                if (s) return r >= u ? s : s * ("desc" == e[r] ? -1 : 1);
              }
              return t.index - n.index;
            }(t, n, e);
          }));
        }
        function Gr(t, n, e) {
          for (var r = -1, a = n.length, i = {}; ++r < a; ) {
            var o = n[r], u = kr(t, o);
            e(u, o) && ta(i, wa(o, t), u);
          }
          return i;
        }
        function Kr(t, n, e, r) {
          var a = r ? Dn : $n, i = -1, o = n.length, u = t;
          for (t === n && (n = Ea(n)), e && (u = qn(t, Qn(e))); ++i < o; ) for (var s = 0, c = n[i], l = e ? e(c) : c; (s = a(u, l, s, r)) > -1; ) u !== t && Xt.call(u, s, 1), 
          Xt.call(t, s, 1);
          return t;
        }
        function Zr(t, n) {
          for (var e = t ? n.length : 0, r = e - 1; e--; ) {
            var a = n[e];
            if (e == r || a !== i) {
              var i = a;
              bi(a) ? Xt.call(t, a, 1) : ha(t, a);
            }
          }
          return t;
        }
        function Jr(t, n) {
          return t + vn(Ae() * (n - t + 1));
        }
        function Xr(t, n) {
          var e = "";
          if (!t || n < 1 || n > g) return e;
          do {
            n % 2 && (e += t), (n = vn(n / 2)) && (t += t);
          } while (n);
          return e;
        }
        function Vr(t, n) {
          return Oi(Mi(t, n, is), t + "");
        }
        function Yr(t) {
          return Ye(Uu(t));
        }
        function Qr(t, n) {
          var e = Uu(t);
          return Li(e, sr(n, 0, e.length));
        }
        function ta(t, n, e, a) {
          if (!eu(t)) return t;
          for (var i = -1, o = (n = wa(n, t)).length, u = o - 1, s = t; null != s && ++i < o; ) {
            var c = Ni(n[i]), l = e;
            if ("__proto__" === c || "constructor" === c || "prototype" === c) return t;
            if (i != u) {
              var f = s[c];
              (l = a ? a(f, c, s) : r) === r && (l = eu(f) ? f : bi(n[i + 1]) ? [] : {});
            }
            er(s, c, l), s = s[c];
          }
          return t;
        }
        var na = Se ? function(t, n) {
          return Se.set(t, n), t;
        } : is, ea = rn ? function(t, n) {
          return rn(t, "toString", {
            configurable: !0,
            enumerable: !1,
            value: es(n),
            writable: !0
          });
        } : is;
        function ra(t) {
          return Li(Uu(t));
        }
        function aa(t, n, e) {
          var r = -1, a = t.length;
          n < 0 && (n = -n > a ? 0 : a + n), (e = e > a ? a : e) < 0 && (e += a), a = n > e ? 0 : e - n >>> 0, 
          n >>>= 0;
          for (var i = ot(a); ++r < a; ) i[r] = t[r + n];
          return i;
        }
        function ia(t, n) {
          var e;
          return gr(t, (function(t, r, a) {
            return !(e = n(t, r, a));
          })), !!e;
        }
        function oa(t, n, e) {
          var r = 0, a = null == t ? r : t.length;
          if ("number" == typeof n && n == n && a <= 2147483647) {
            for (;r < a; ) {
              var i = r + a >>> 1, o = t[i];
              null !== o && !lu(o) && (e ? o <= n : o < n) ? r = i + 1 : a = i;
            }
            return a;
          }
          return ua(t, n, is, e);
        }
        function ua(t, n, e, a) {
          var i = 0, o = null == t ? 0 : t.length;
          if (0 === o) return 0;
          for (var u = (n = e(n)) != n, s = null === n, c = lu(n), l = n === r; i < o; ) {
            var f = vn((i + o) / 2), h = e(t[f]), g = h !== r, p = null === h, d = h == h, m = lu(h);
            if (u) var v = a || d; else v = l ? d && (a || g) : s ? d && g && (a || !p) : c ? d && g && !p && (a || !m) : !p && !m && (a ? h <= n : h < n);
            v ? i = f + 1 : o = f;
          }
          return we(o, 4294967294);
        }
        function sa(t, n) {
          for (var e = -1, r = t.length, a = 0, i = []; ++e < r; ) {
            var o = t[e], u = n ? n(o) : o;
            if (!e || !Uo(u, s)) {
              var s = u;
              i[a++] = 0 === o ? 0 : o;
            }
          }
          return i;
        }
        function ca(t) {
          return "number" == typeof t ? t : lu(t) ? p : +t;
        }
        function la(t) {
          if ("string" == typeof t) return t;
          if (Go(t)) return qn(t, la) + "";
          if (lu(t)) return Be ? Be.call(t) : "";
          var n = t + "";
          return "0" == n && 1 / t == -1 / 0 ? "-0" : n;
        }
        function fa(t, n, e) {
          var r = -1, a = On, i = t.length, o = !0, u = [], s = u;
          if (e) o = !1, a = Rn; else if (i >= 200) {
            var c = n ? null : Xa(t);
            if (c) return he(c);
            o = !1, a = ne, s = new Je;
          } else s = n ? [] : u;
          t: for (;++r < i; ) {
            var l = t[r], f = n ? n(l) : l;
            if (l = e || 0 !== l ? l : 0, o && f == f) {
              for (var h = s.length; h--; ) if (s[h] === f) continue t;
              n && s.push(f), u.push(l);
            } else a(s, f, e) || (s !== u && s.push(f), u.push(l));
          }
          return u;
        }
        function ha(t, n) {
          return null == (t = Ci(t, n = wa(n, t))) || delete t[Ni(Vi(n))];
        }
        function ga(t, n, e, r) {
          return ta(t, n, e(kr(t, n)), r);
        }
        function pa(t, n, e, r) {
          for (var a = t.length, i = r ? a : -1; (r ? i-- : ++i < a) && n(t[i], i, t); ) ;
          return e ? aa(t, r ? 0 : i, r ? i + 1 : a) : aa(t, r ? i + 1 : 0, r ? a : i);
        }
        function da(t, n) {
          var e = t;
          return e instanceof He && (e = e.value()), Pn(n, (function(t, n) {
            return n.func.apply(n.thisArg, Ln([ t ], n.args));
          }), e);
        }
        function ma(t, n, e) {
          var r = t.length;
          if (r < 2) return r ? fa(t[0]) : [];
          for (var a = -1, i = ot(r); ++a < r; ) for (var o = t[a], u = -1; ++u < r; ) u != a && (i[a] = hr(i[a] || o, t[u], n, e));
          return fa(yr(i, 1), n, e);
        }
        function va(t, n, e) {
          for (var a = -1, i = t.length, o = n.length, u = {}; ++a < i; ) {
            var s = a < o ? n[a] : r;
            e(u, t[a], s);
          }
          return u;
        }
        function ya(t) {
          return Jo(t) ? t : [];
        }
        function ba(t) {
          return "function" == typeof t ? t : is;
        }
        function wa(t, n) {
          return Go(t) ? t : _i(t, n) ? [ t ] : Pi(wu(t));
        }
        var _a = Vr;
        function xa(t, n, e) {
          var a = t.length;
          return e = e === r ? a : e, !n && e >= a ? t : aa(t, n, e);
        }
        var Aa = ln || function(t) {
          return dn.clearTimeout(t);
        };
        function ka(t, n) {
          if (n) return t.slice();
          var e = t.length, r = Gt ? Gt(e) : new t.constructor(e);
          return t.copy(r), r;
        }
        function ja(t) {
          var n = new t.constructor(t.byteLength);
          return new Ht(n).set(new Ht(t)), n;
        }
        function Ta(t, n) {
          var e = n ? ja(t.buffer) : t.buffer;
          return new t.constructor(e, t.byteOffset, t.length);
        }
        function Ma(t, n) {
          if (t !== n) {
            var e = t !== r, a = null === t, i = t == t, o = lu(t), u = n !== r, s = null === n, c = n == n, l = lu(n);
            if (!s && !l && !o && t > n || o && u && c && !s && !l || a && u && c || !e && c || !i) return 1;
            if (!a && !o && !l && t < n || l && e && i && !a && !o || s && e && i || !u && i || !c) return -1;
          }
          return 0;
        }
        function Ca(t, n, e, r) {
          for (var a = -1, i = t.length, o = e.length, u = -1, s = n.length, c = be(i - o, 0), l = ot(s + c), f = !r; ++u < s; ) l[u] = n[u];
          for (;++a < o; ) (f || a < i) && (l[e[a]] = t[a]);
          for (;c--; ) l[u++] = t[a++];
          return l;
        }
        function Ia(t, n, e, r) {
          for (var a = -1, i = t.length, o = -1, u = e.length, s = -1, c = n.length, l = be(i - u, 0), f = ot(l + c), h = !r; ++a < l; ) f[a] = t[a];
          for (var g = a; ++s < c; ) f[g + s] = n[s];
          for (;++o < u; ) (h || a < i) && (f[g + e[o]] = t[a++]);
          return f;
        }
        function Ea(t, n) {
          var e = -1, r = t.length;
          for (n || (n = ot(r)); ++e < r; ) n[e] = t[e];
          return n;
        }
        function Sa(t, n, e, a) {
          var i = !e;
          e || (e = {});
          for (var o = -1, u = n.length; ++o < u; ) {
            var s = n[o], c = a ? a(e[s], t[s], s, e, t) : r;
            c === r && (c = t[s]), i ? or(e, s, c) : er(e, s, c);
          }
          return e;
        }
        function za(t, n) {
          return function(e, r) {
            var a = Go(e) ? Cn : ar, i = n ? n() : {};
            return a(e, t, ci(r, 2), i);
          };
        }
        function Oa(t) {
          return Vr((function(n, e) {
            var a = -1, i = e.length, o = i > 1 ? e[i - 1] : r, u = i > 2 ? e[2] : r;
            for (o = t.length > 3 && "function" == typeof o ? (i--, o) : r, u && wi(e[0], e[1], u) && (o = i < 3 ? r : o, 
            i = 1), n = Mt(n); ++a < i; ) {
              var s = e[a];
              s && t(n, s, a, o);
            }
            return n;
          }));
        }
        function Ra(t, n) {
          return function(e, r) {
            if (null == e) return e;
            if (!Zo(e)) return t(e, r);
            for (var a = e.length, i = n ? a : -1, o = Mt(e); (n ? i-- : ++i < a) && !1 !== r(o[i], i, o); ) ;
            return e;
          };
        }
        function qa(t) {
          return function(n, e, r) {
            for (var a = -1, i = Mt(n), o = r(n), u = o.length; u--; ) {
              var s = o[t ? u : ++a];
              if (!1 === e(i[s], s, i)) break;
            }
            return n;
          };
        }
        function La(t) {
          return function(n) {
            var e = se(n = wu(n)) ? pe(n) : r, a = e ? e[0] : n.charAt(0), i = e ? xa(e, 1).join("") : n.slice(1);
            return a[t]() + i;
          };
        }
        function Pa(t) {
          return function(n) {
            return Pn(Qu(Hu(n).replace(Qt, "")), t, "");
          };
        }
        function Na(t) {
          return function() {
            var n = arguments;
            switch (n.length) {
             case 0:
              return new t;

             case 1:
              return new t(n[0]);

             case 2:
              return new t(n[0], n[1]);

             case 3:
              return new t(n[0], n[1], n[2]);

             case 4:
              return new t(n[0], n[1], n[2], n[3]);

             case 5:
              return new t(n[0], n[1], n[2], n[3], n[4]);

             case 6:
              return new t(n[0], n[1], n[2], n[3], n[4], n[5]);

             case 7:
              return new t(n[0], n[1], n[2], n[3], n[4], n[5], n[6]);
            }
            var e = Ue(t.prototype), r = t.apply(e, n);
            return eu(r) ? r : e;
          };
        }
        function Wa(t) {
          return function(n, e, a) {
            var i = Mt(n);
            if (!Zo(n)) {
              var o = ci(e, 3);
              n = Ou(n), e = function(t) {
                return o(i[t], t, i);
              };
            }
            var u = t(n, e, a);
            return u > -1 ? i[o ? n[u] : u] : r;
          };
        }
        function Ba(t) {
          return ri((function(n) {
            var e = n.length, i = e, o = De.prototype.thru;
            for (t && n.reverse(); i--; ) {
              var u = n[i];
              if ("function" != typeof u) throw new Et(a);
              if (o && !s && "wrapper" == ui(u)) var s = new De([], !0);
            }
            for (i = s ? i : e; ++i < e; ) {
              var c = ui(u = n[i]), l = "wrapper" == c ? oi(u) : r;
              s = l && xi(l[0]) && 424 == l[1] && !l[4].length && 1 == l[9] ? s[ui(l[0])].apply(s, l[3]) : 1 == u.length && xi(u) ? s[c]() : s.thru(u);
            }
            return function() {
              var t = arguments, r = t[0];
              if (s && 1 == t.length && Go(r)) return s.plant(r).value();
              for (var a = 0, i = e ? n[a].apply(this, t) : r; ++a < e; ) i = n[a].call(this, i);
              return i;
            };
          }));
        }
        function Fa(t, n, e, a, i, o, u, s, c, f) {
          var h = n & l, g = 1 & n, p = 2 & n, d = 24 & n, m = 512 & n, v = p ? r : Na(t);
          return function r() {
            for (var l = arguments.length, y = ot(l), b = l; b--; ) y[b] = arguments[b];
            if (d) var w = si(r), _ = ae(y, w);
            if (a && (y = Ca(y, a, i, d)), o && (y = Ia(y, o, u, d)), l -= _, d && l < f) {
              var x = fe(y, w);
              return Za(t, n, Fa, r.placeholder, e, y, x, s, c, f - l);
            }
            var A = g ? e : this, k = p ? A[t] : t;
            return l = y.length, s ? y = Ii(y, s) : m && l > 1 && y.reverse(), h && c < l && (y.length = c), 
            this && this !== dn && this instanceof r && (k = v || Na(k)), k.apply(A, y);
          };
        }
        function Ua(t, n) {
          return function(e, r) {
            return function(t, n, e, r) {
              return _r(t, (function(t, a, i) {
                n(r, e(t), a, i);
              })), r;
            }(e, t, n(r), {});
          };
        }
        function $a(t, n) {
          return function(e, a) {
            var i;
            if (e === r && a === r) return n;
            if (e !== r && (i = e), a !== r) {
              if (i === r) return a;
              "string" == typeof e || "string" == typeof a ? (e = la(e), a = la(a)) : (e = ca(e), 
              a = ca(a)), i = t(e, a);
            }
            return i;
          };
        }
        function Da(t) {
          return ri((function(n) {
            return n = qn(n, Qn(ci())), Vr((function(e) {
              var r = this;
              return t(n, (function(t) {
                return Mn(t, r, e);
              }));
            }));
          }));
        }
        function Ha(t, n) {
          var e = (n = n === r ? " " : la(n)).length;
          if (e < 2) return e ? Xr(n, t) : n;
          var a = Xr(n, mn(t / ge(n)));
          return se(n) ? xa(pe(a), 0, t).join("") : a.slice(0, t);
        }
        function Ga(t) {
          return function(n, e, a) {
            return a && "number" != typeof a && wi(n, e, a) && (e = a = r), n = du(n), e === r ? (e = n, 
            n = 0) : e = du(e), function(t, n, e, r) {
              for (var a = -1, i = be(mn((n - t) / (e || 1)), 0), o = ot(i); i--; ) o[r ? i : ++a] = t, 
              t += e;
              return o;
            }(n, e, a = a === r ? n < e ? 1 : -1 : du(a), t);
          };
        }
        function Ka(t) {
          return function(n, e) {
            return "string" == typeof n && "string" == typeof e || (n = yu(n), e = yu(e)), t(n, e);
          };
        }
        function Za(t, n, e, a, i, o, u, l, f, h) {
          var g = 8 & n;
          n |= g ? s : c, 4 & (n &= ~(g ? c : s)) || (n &= -4);
          var p = [ t, n, i, g ? o : r, g ? u : r, g ? r : o, g ? r : u, l, f, h ], d = e.apply(r, p);
          return xi(t) && Si(d, p), d.placeholder = a, Ri(d, t, n);
        }
        function Ja(t) {
          var n = Tt[t];
          return function(t, e) {
            if (t = yu(t), (e = null == e ? 0 : we(mu(e), 292)) && Bn(t)) {
              var r = (wu(t) + "e").split("e");
              return +((r = (wu(n(r[0] + "e" + (+r[1] + e))) + "e").split("e"))[0] + "e" + (+r[1] - e));
            }
            return n(t);
          };
        }
        var Xa = Ce && 1 / he(new Ce([ , -0 ]))[1] == h ? function(t) {
          return new Ce(t);
        } : ls;
        function Va(t) {
          return function(n) {
            var e = di(n);
            return e == k ? ce(n) : e == I ? function(t) {
              var n = -1, e = Array(t.size);
              return t.forEach((function(t) {
                e[++n] = [ t, t ];
              })), e;
            }(n) : function(t, n) {
              return qn(n, (function(n) {
                return [ n, t[n] ];
              }));
            }(n, t(n));
          };
        }
        function Ya(t, n, e, i, h, g, p, d) {
          var m = 2 & n;
          if (!m && "function" != typeof t) throw new Et(a);
          var v = i ? i.length : 0;
          if (v || (n &= -97, i = h = r), p = p === r ? p : be(mu(p), 0), d = d === r ? d : mu(d), 
          v -= h ? h.length : 0, n & c) {
            var y = i, b = h;
            i = h = r;
          }
          var w = m ? r : oi(t), _ = [ t, n, e, i, h, y, b, g, p, d ];
          if (w && function(t, n) {
            var e = t[1], r = n[1], a = e | r, i = a < 131, u = r == l && 8 == e || r == l && e == f && t[7].length <= n[8] || 384 == r && n[7].length <= n[8] && 8 == e;
            if (!i && !u) return t;
            1 & r && (t[2] = n[2], a |= 1 & e ? 0 : 4);
            var s = n[3];
            if (s) {
              var c = t[3];
              t[3] = c ? Ca(c, s, n[4]) : s, t[4] = c ? fe(t[3], o) : n[4];
            }
            (s = n[5]) && (c = t[5], t[5] = c ? Ia(c, s, n[6]) : s, t[6] = c ? fe(t[5], o) : n[6]);
            (s = n[7]) && (t[7] = s);
            r & l && (t[8] = null == t[8] ? n[8] : we(t[8], n[8]));
            null == t[9] && (t[9] = n[9]);
            t[0] = n[0], t[1] = a;
          }(_, w), t = _[0], n = _[1], e = _[2], i = _[3], h = _[4], !(d = _[9] = _[9] === r ? m ? 0 : t.length : be(_[9] - v, 0)) && 24 & n && (n &= -25), 
          n && 1 != n) x = 8 == n || n == u ? function(t, n, e) {
            var a = Na(t);
            return function i() {
              for (var o = arguments.length, u = ot(o), s = o, c = si(i); s--; ) u[s] = arguments[s];
              var l = o < 3 && u[0] !== c && u[o - 1] !== c ? [] : fe(u, c);
              return (o -= l.length) < e ? Za(t, n, Fa, i.placeholder, r, u, l, r, r, e - o) : Mn(this && this !== dn && this instanceof i ? a : t, this, u);
            };
          }(t, n, d) : n != s && 33 != n || h.length ? Fa.apply(r, _) : function(t, n, e, r) {
            var a = 1 & n, i = Na(t);
            return function n() {
              for (var o = -1, u = arguments.length, s = -1, c = r.length, l = ot(c + u), f = this && this !== dn && this instanceof n ? i : t; ++s < c; ) l[s] = r[s];
              for (;u--; ) l[s++] = arguments[++o];
              return Mn(f, a ? e : this, l);
            };
          }(t, n, e, i); else var x = function(t, n, e) {
            var r = 1 & n, a = Na(t);
            return function n() {
              return (this && this !== dn && this instanceof n ? a : t).apply(r ? e : this, arguments);
            };
          }(t, n, e);
          return Ri((w ? na : Si)(x, _), t, n);
        }
        function Qa(t, n, e, a) {
          return t === r || Uo(t, Ot[e]) && !Lt.call(a, e) ? n : t;
        }
        function ti(t, n, e, a, i, o) {
          return eu(t) && eu(n) && (o.set(n, t), $r(t, n, r, ti, o), o.delete(n)), t;
        }
        function ni(t) {
          return ou(t) ? r : t;
        }
        function ei(t, n, e, a, i, o) {
          var u = 1 & e, s = t.length, c = n.length;
          if (s != c && !(u && c > s)) return !1;
          var l = o.get(t), f = o.get(n);
          if (l && f) return l == n && f == t;
          var h = -1, g = !0, p = 2 & e ? new Je : r;
          for (o.set(t, n), o.set(n, t); ++h < s; ) {
            var d = t[h], m = n[h];
            if (a) var v = u ? a(m, d, h, n, t, o) : a(d, m, h, t, n, o);
            if (v !== r) {
              if (v) continue;
              g = !1;
              break;
            }
            if (p) {
              if (!Wn(n, (function(t, n) {
                if (!ne(p, n) && (d === t || i(d, t, e, a, o))) return p.push(n);
              }))) {
                g = !1;
                break;
              }
            } else if (d !== m && !i(d, m, e, a, o)) {
              g = !1;
              break;
            }
          }
          return o.delete(t), o.delete(n), g;
        }
        function ri(t) {
          return Oi(Mi(t, r, Gi), t + "");
        }
        function ai(t) {
          return jr(t, Ou, gi);
        }
        function ii(t) {
          return jr(t, Ru, pi);
        }
        var oi = Se ? function(t) {
          return Se.get(t);
        } : ls;
        function ui(t) {
          for (var n = t.name + "", e = ze[n], r = Lt.call(ze, n) ? e.length : 0; r--; ) {
            var a = e[r], i = a.func;
            if (null == i || i == t) return a.name;
          }
          return n;
        }
        function si(t) {
          return (Lt.call(Fe, "placeholder") ? Fe : t).placeholder;
        }
        function ci() {
          var t = Fe.iteratee || os;
          return t = t === os ? Lr : t, arguments.length ? t(arguments[0], arguments[1]) : t;
        }
        function li(t, n) {
          var e, r, a = t.__data__;
          return ("string" == (r = typeof (e = n)) || "number" == r || "symbol" == r || "boolean" == r ? "__proto__" !== e : null === e) ? a["string" == typeof n ? "string" : "hash"] : a.map;
        }
        function fi(t) {
          for (var n = Ou(t), e = n.length; e--; ) {
            var r = n[e], a = t[r];
            n[e] = [ r, a, ji(a) ];
          }
          return n;
        }
        function hi(t, n) {
          var e = function(t, n) {
            return null == t ? r : t[n];
          }(t, n);
          return qr(e) ? e : r;
        }
        var gi = bn ? function(t) {
          return null == t ? [] : (t = Mt(t), zn(bn(t), (function(n) {
            return Jt.call(t, n);
          })));
        } : vs, pi = bn ? function(t) {
          for (var n = []; t; ) Ln(n, gi(t)), t = Kt(t);
          return n;
        } : vs, di = Tr;
        function mi(t, n, e) {
          for (var r = -1, a = (n = wa(n, t)).length, i = !1; ++r < a; ) {
            var o = Ni(n[r]);
            if (!(i = null != t && e(t, o))) break;
            t = t[o];
          }
          return i || ++r != a ? i : !!(a = null == t ? 0 : t.length) && nu(a) && bi(o, a) && (Go(t) || Ho(t));
        }
        function vi(t) {
          return "function" != typeof t.constructor || ki(t) ? {} : Ue(Kt(t));
        }
        function yi(t) {
          return Go(t) || Ho(t) || !!(Vt && t && t[Vt]);
        }
        function bi(t, n) {
          var e = typeof t;
          return !!(n = null == n ? g : n) && ("number" == e || "symbol" != e && bt.test(t)) && t > -1 && t % 1 == 0 && t < n;
        }
        function wi(t, n, e) {
          if (!eu(e)) return !1;
          var r = typeof n;
          return !!("number" == r ? Zo(e) && bi(n, e.length) : "string" == r && n in e) && Uo(e[n], t);
        }
        function _i(t, n) {
          if (Go(t)) return !1;
          var e = typeof t;
          return !("number" != e && "symbol" != e && "boolean" != e && null != t && !lu(t)) || (nt.test(t) || !tt.test(t) || null != n && t in Mt(n));
        }
        function xi(t) {
          var n = ui(t), e = Fe[n];
          if ("function" != typeof e || !(n in He.prototype)) return !1;
          if (t === e) return !0;
          var r = oi(e);
          return !!r && t === r[0];
        }
        (je && di(new je(new ArrayBuffer(1))) != R || Te && di(new Te) != k || Me && di(Me.resolve()) != M || Ce && di(new Ce) != I || Ie && di(new Ie) != z) && (di = function(t) {
          var n = Tr(t), e = n == T ? t.constructor : r, a = e ? Wi(e) : "";
          if (a) switch (a) {
           case Oe:
            return R;

           case Re:
            return k;

           case qe:
            return M;

           case Le:
            return I;

           case Pe:
            return z;
          }
          return n;
        });
        var Ai = Rt ? Qo : ys;
        function ki(t) {
          var n = t && t.constructor;
          return t === ("function" == typeof n && n.prototype || Ot);
        }
        function ji(t) {
          return t == t && !eu(t);
        }
        function Ti(t, n) {
          return function(e) {
            return null != e && (e[t] === n && (n !== r || t in Mt(e)));
          };
        }
        function Mi(t, n, e) {
          return n = be(n === r ? t.length - 1 : n, 0), function() {
            for (var r = arguments, a = -1, i = be(r.length - n, 0), o = ot(i); ++a < i; ) o[a] = r[n + a];
            a = -1;
            for (var u = ot(n + 1); ++a < n; ) u[a] = r[a];
            return u[n] = e(o), Mn(t, this, u);
          };
        }
        function Ci(t, n) {
          return n.length < 2 ? t : kr(t, aa(n, 0, -1));
        }
        function Ii(t, n) {
          for (var e = t.length, a = we(n.length, e), i = Ea(t); a--; ) {
            var o = n[a];
            t[a] = bi(o, e) ? i[o] : r;
          }
          return t;
        }
        function Ei(t, n) {
          if (("constructor" !== n || "function" != typeof t[n]) && "__proto__" != n) return t[n];
        }
        var Si = qi(na), zi = pn || function(t, n) {
          return dn.setTimeout(t, n);
        }, Oi = qi(ea);
        function Ri(t, n, e) {
          var r = n + "";
          return Oi(t, function(t, n) {
            var e = n.length;
            if (!e) return t;
            var r = e - 1;
            return n[r] = (e > 1 ? "& " : "") + n[r], n = n.join(e > 2 ? ", " : " "), t.replace(ut, "{\n/* [wrapped with " + n + "] */\n");
          }(r, function(t, n) {
            return In(m, (function(e) {
              var r = "_." + e[0];
              n & e[1] && !On(t, r) && t.push(r);
            })), t.sort();
          }(function(t) {
            var n = t.match(st);
            return n ? n[1].split(ct) : [];
          }(r), e)));
        }
        function qi(t) {
          var n = 0, e = 0;
          return function() {
            var a = _e(), i = 16 - (a - e);
            if (e = a, i > 0) {
              if (++n >= 800) return arguments[0];
            } else n = 0;
            return t.apply(r, arguments);
          };
        }
        function Li(t, n) {
          var e = -1, a = t.length, i = a - 1;
          for (n = n === r ? a : n; ++e < n; ) {
            var o = Jr(e, i), u = t[o];
            t[o] = t[e], t[e] = u;
          }
          return t.length = n, t;
        }
        var Pi = function(t) {
          var n = Lo(t, (function(t) {
            return 500 === e.size && e.clear(), t;
          })), e = n.cache;
          return n;
        }((function(t) {
          var n = [];
          return 46 === t.charCodeAt(0) && n.push(""), t.replace(et, (function(t, e, r, a) {
            n.push(r ? a.replace(ht, "$1") : e || t);
          })), n;
        }));
        function Ni(t) {
          if ("string" == typeof t || lu(t)) return t;
          var n = t + "";
          return "0" == n && 1 / t == -1 / 0 ? "-0" : n;
        }
        function Wi(t) {
          if (null != t) {
            try {
              return qt.call(t);
            } catch (t) {}
            try {
              return t + "";
            } catch (t) {}
          }
          return "";
        }
        function Bi(t) {
          if (t instanceof He) return t.clone();
          var n = new De(t.__wrapped__, t.__chain__);
          return n.__actions__ = Ea(t.__actions__), n.__index__ = t.__index__, n.__values__ = t.__values__, 
          n;
        }
        var Fi = Vr((function(t, n) {
          return Jo(t) ? hr(t, yr(n, 1, Jo, !0)) : [];
        })), Ui = Vr((function(t, n) {
          var e = Vi(n);
          return Jo(e) && (e = r), Jo(t) ? hr(t, yr(n, 1, Jo, !0), ci(e, 2)) : [];
        })), $i = Vr((function(t, n) {
          var e = Vi(n);
          return Jo(e) && (e = r), Jo(t) ? hr(t, yr(n, 1, Jo, !0), r, e) : [];
        }));
        function Di(t, n, e) {
          var r = null == t ? 0 : t.length;
          if (!r) return -1;
          var a = null == e ? 0 : mu(e);
          return a < 0 && (a = be(r + a, 0)), Un(t, ci(n, 3), a);
        }
        function Hi(t, n, e) {
          var a = null == t ? 0 : t.length;
          if (!a) return -1;
          var i = a - 1;
          return e !== r && (i = mu(e), i = e < 0 ? be(a + i, 0) : we(i, a - 1)), Un(t, ci(n, 3), i, !0);
        }
        function Gi(t) {
          return (null == t ? 0 : t.length) ? yr(t, 1) : [];
        }
        function Ki(t) {
          return t && t.length ? t[0] : r;
        }
        var Zi = Vr((function(t) {
          var n = qn(t, ya);
          return n.length && n[0] === t[0] ? Er(n) : [];
        })), Ji = Vr((function(t) {
          var n = Vi(t), e = qn(t, ya);
          return n === Vi(e) ? n = r : e.pop(), e.length && e[0] === t[0] ? Er(e, ci(n, 2)) : [];
        })), Xi = Vr((function(t) {
          var n = Vi(t), e = qn(t, ya);
          return (n = "function" == typeof n ? n : r) && e.pop(), e.length && e[0] === t[0] ? Er(e, r, n) : [];
        }));
        function Vi(t) {
          var n = null == t ? 0 : t.length;
          return n ? t[n - 1] : r;
        }
        var Yi = Vr(Qi);
        function Qi(t, n) {
          return t && t.length && n && n.length ? Kr(t, n) : t;
        }
        var to = ri((function(t, n) {
          var e = null == t ? 0 : t.length, r = ur(t, n);
          return Zr(t, qn(n, (function(t) {
            return bi(t, e) ? +t : t;
          })).sort(Ma)), r;
        }));
        function no(t) {
          return null == t ? t : ke.call(t);
        }
        var eo = Vr((function(t) {
          return fa(yr(t, 1, Jo, !0));
        })), ro = Vr((function(t) {
          var n = Vi(t);
          return Jo(n) && (n = r), fa(yr(t, 1, Jo, !0), ci(n, 2));
        })), ao = Vr((function(t) {
          var n = Vi(t);
          return n = "function" == typeof n ? n : r, fa(yr(t, 1, Jo, !0), r, n);
        }));
        function io(t) {
          if (!t || !t.length) return [];
          var n = 0;
          return t = zn(t, (function(t) {
            if (Jo(t)) return n = be(t.length, n), !0;
          })), Vn(n, (function(n) {
            return qn(t, Kn(n));
          }));
        }
        function oo(t, n) {
          if (!t || !t.length) return [];
          var e = io(t);
          return null == n ? e : qn(e, (function(t) {
            return Mn(n, r, t);
          }));
        }
        var uo = Vr((function(t, n) {
          return Jo(t) ? hr(t, n) : [];
        })), so = Vr((function(t) {
          return ma(zn(t, Jo));
        })), co = Vr((function(t) {
          var n = Vi(t);
          return Jo(n) && (n = r), ma(zn(t, Jo), ci(n, 2));
        })), lo = Vr((function(t) {
          var n = Vi(t);
          return n = "function" == typeof n ? n : r, ma(zn(t, Jo), r, n);
        })), fo = Vr(io);
        var ho = Vr((function(t) {
          var n = t.length, e = n > 1 ? t[n - 1] : r;
          return e = "function" == typeof e ? (t.pop(), e) : r, oo(t, e);
        }));
        function go(t) {
          var n = Fe(t);
          return n.__chain__ = !0, n;
        }
        function po(t, n) {
          return n(t);
        }
        var mo = ri((function(t) {
          var n = t.length, e = n ? t[0] : 0, a = this.__wrapped__, i = function(n) {
            return ur(n, t);
          };
          return !(n > 1 || this.__actions__.length) && a instanceof He && bi(e) ? ((a = a.slice(e, +e + (n ? 1 : 0))).__actions__.push({
            func: po,
            args: [ i ],
            thisArg: r
          }), new De(a, this.__chain__).thru((function(t) {
            return n && !t.length && t.push(r), t;
          }))) : this.thru(i);
        }));
        var vo = za((function(t, n, e) {
          Lt.call(t, e) ? ++t[e] : or(t, e, 1);
        }));
        var yo = Wa(Di), bo = Wa(Hi);
        function wo(t, n) {
          return (Go(t) ? In : gr)(t, ci(n, 3));
        }
        function _o(t, n) {
          return (Go(t) ? En : pr)(t, ci(n, 3));
        }
        var xo = za((function(t, n, e) {
          Lt.call(t, e) ? t[e].push(n) : or(t, e, [ n ]);
        }));
        var Ao = Vr((function(t, n, e) {
          var r = -1, a = "function" == typeof n, i = Zo(t) ? ot(t.length) : [];
          return gr(t, (function(t) {
            i[++r] = a ? Mn(n, t, e) : Sr(t, n, e);
          })), i;
        })), ko = za((function(t, n, e) {
          or(t, e, n);
        }));
        function jo(t, n) {
          return (Go(t) ? qn : Br)(t, ci(n, 3));
        }
        var To = za((function(t, n, e) {
          t[e ? 0 : 1].push(n);
        }), (function() {
          return [ [], [] ];
        }));
        var Mo = Vr((function(t, n) {
          if (null == t) return [];
          var e = n.length;
          return e > 1 && wi(t, n[0], n[1]) ? n = [] : e > 2 && wi(n[0], n[1], n[2]) && (n = [ n[0] ]), 
          Hr(t, yr(n, 1), []);
        })), Co = gn || function() {
          return dn.Date.now();
        };
        function Io(t, n, e) {
          return n = e ? r : n, n = t && null == n ? t.length : n, Ya(t, l, r, r, r, r, n);
        }
        function Eo(t, n) {
          var e;
          if ("function" != typeof n) throw new Et(a);
          return t = mu(t), function() {
            return --t > 0 && (e = n.apply(this, arguments)), t <= 1 && (n = r), e;
          };
        }
        var So = Vr((function(t, n, e) {
          var r = 1;
          if (e.length) {
            var a = fe(e, si(So));
            r |= s;
          }
          return Ya(t, r, n, e, a);
        })), zo = Vr((function(t, n, e) {
          var r = 3;
          if (e.length) {
            var a = fe(e, si(zo));
            r |= s;
          }
          return Ya(n, r, t, e, a);
        }));
        function Oo(t, n, e) {
          var i, o, u, s, c, l, f = 0, h = !1, g = !1, p = !0;
          if ("function" != typeof t) throw new Et(a);
          function d(n) {
            var e = i, a = o;
            return i = o = r, f = n, s = t.apply(a, e);
          }
          function m(t) {
            return f = t, c = zi(y, n), h ? d(t) : s;
          }
          function v(t) {
            var e = t - l;
            return l === r || e >= n || e < 0 || g && t - f >= u;
          }
          function y() {
            var t = Co();
            if (v(t)) return b(t);
            c = zi(y, function(t) {
              var e = n - (t - l);
              return g ? we(e, u - (t - f)) : e;
            }(t));
          }
          function b(t) {
            return c = r, p && i ? d(t) : (i = o = r, s);
          }
          function w() {
            var t = Co(), e = v(t);
            if (i = arguments, o = this, l = t, e) {
              if (c === r) return m(l);
              if (g) return Aa(c), c = zi(y, n), d(l);
            }
            return c === r && (c = zi(y, n)), s;
          }
          return n = yu(n) || 0, eu(e) && (h = !!e.leading, u = (g = "maxWait" in e) ? be(yu(e.maxWait) || 0, n) : u, 
          p = "trailing" in e ? !!e.trailing : p), w.cancel = function() {
            c !== r && Aa(c), f = 0, i = l = o = c = r;
          }, w.flush = function() {
            return c === r ? s : b(Co());
          }, w;
        }
        var Ro = Vr((function(t, n) {
          return fr(t, 1, n);
        })), qo = Vr((function(t, n, e) {
          return fr(t, yu(n) || 0, e);
        }));
        function Lo(t, n) {
          if ("function" != typeof t || null != n && "function" != typeof n) throw new Et(a);
          var e = function() {
            var r = arguments, a = n ? n.apply(this, r) : r[0], i = e.cache;
            if (i.has(a)) return i.get(a);
            var o = t.apply(this, r);
            return e.cache = i.set(a, o) || i, o;
          };
          return e.cache = new (Lo.Cache || Ze), e;
        }
        function Po(t) {
          if ("function" != typeof t) throw new Et(a);
          return function() {
            var n = arguments;
            switch (n.length) {
             case 0:
              return !t.call(this);

             case 1:
              return !t.call(this, n[0]);

             case 2:
              return !t.call(this, n[0], n[1]);

             case 3:
              return !t.call(this, n[0], n[1], n[2]);
            }
            return !t.apply(this, n);
          };
        }
        Lo.Cache = Ze;
        var No = _a((function(t, n) {
          var e = (n = 1 == n.length && Go(n[0]) ? qn(n[0], Qn(ci())) : qn(yr(n, 1), Qn(ci()))).length;
          return Vr((function(r) {
            for (var a = -1, i = we(r.length, e); ++a < i; ) r[a] = n[a].call(this, r[a]);
            return Mn(t, this, r);
          }));
        })), Wo = Vr((function(t, n) {
          var e = fe(n, si(Wo));
          return Ya(t, s, r, n, e);
        })), Bo = Vr((function(t, n) {
          var e = fe(n, si(Bo));
          return Ya(t, c, r, n, e);
        })), Fo = ri((function(t, n) {
          return Ya(t, f, r, r, r, n);
        }));
        function Uo(t, n) {
          return t === n || t != t && n != n;
        }
        var $o = Ka(Mr), Do = Ka((function(t, n) {
          return t >= n;
        })), Ho = zr(function() {
          return arguments;
        }()) ? zr : function(t) {
          return ru(t) && Lt.call(t, "callee") && !Jt.call(t, "callee");
        }, Go = ot.isArray, Ko = _n ? Qn(_n) : function(t) {
          return ru(t) && Tr(t) == O;
        };
        function Zo(t) {
          return null != t && nu(t.length) && !Qo(t);
        }
        function Jo(t) {
          return ru(t) && Zo(t);
        }
        var Xo = wn || ys, Vo = xn ? Qn(xn) : function(t) {
          return ru(t) && Tr(t) == w;
        };
        function Yo(t) {
          if (!ru(t)) return !1;
          var n = Tr(t);
          return n == _ || "[object DOMException]" == n || "string" == typeof t.message && "string" == typeof t.name && !ou(t);
        }
        function Qo(t) {
          if (!eu(t)) return !1;
          var n = Tr(t);
          return n == x || n == A || "[object AsyncFunction]" == n || "[object Proxy]" == n;
        }
        function tu(t) {
          return "number" == typeof t && t == mu(t);
        }
        function nu(t) {
          return "number" == typeof t && t > -1 && t % 1 == 0 && t <= g;
        }
        function eu(t) {
          var n = typeof t;
          return null != t && ("object" == n || "function" == n);
        }
        function ru(t) {
          return null != t && "object" == typeof t;
        }
        var au = An ? Qn(An) : function(t) {
          return ru(t) && di(t) == k;
        };
        function iu(t) {
          return "number" == typeof t || ru(t) && Tr(t) == j;
        }
        function ou(t) {
          if (!ru(t) || Tr(t) != T) return !1;
          var n = Kt(t);
          if (null === n) return !0;
          var e = Lt.call(n, "constructor") && n.constructor;
          return "function" == typeof e && e instanceof e && qt.call(e) == Bt;
        }
        var uu = kn ? Qn(kn) : function(t) {
          return ru(t) && Tr(t) == C;
        };
        var su = jn ? Qn(jn) : function(t) {
          return ru(t) && di(t) == I;
        };
        function cu(t) {
          return "string" == typeof t || !Go(t) && ru(t) && Tr(t) == E;
        }
        function lu(t) {
          return "symbol" == typeof t || ru(t) && Tr(t) == S;
        }
        var fu = Tn ? Qn(Tn) : function(t) {
          return ru(t) && nu(t.length) && !!sn[Tr(t)];
        };
        var hu = Ka(Wr), gu = Ka((function(t, n) {
          return t <= n;
        }));
        function pu(t) {
          if (!t) return [];
          if (Zo(t)) return cu(t) ? pe(t) : Ea(t);
          if (Yt && t[Yt]) return function(t) {
            for (var n, e = []; !(n = t.next()).done; ) e.push(n.value);
            return e;
          }(t[Yt]());
          var n = di(t);
          return (n == k ? ce : n == I ? he : Uu)(t);
        }
        function du(t) {
          return t ? (t = yu(t)) === h || t === -1 / 0 ? 17976931348623157e292 * (t < 0 ? -1 : 1) : t == t ? t : 0 : 0 === t ? t : 0;
        }
        function mu(t) {
          var n = du(t), e = n % 1;
          return n == n ? e ? n - e : n : 0;
        }
        function vu(t) {
          return t ? sr(mu(t), 0, d) : 0;
        }
        function yu(t) {
          if ("number" == typeof t) return t;
          if (lu(t)) return p;
          if (eu(t)) {
            var n = "function" == typeof t.valueOf ? t.valueOf() : t;
            t = eu(n) ? n + "" : n;
          }
          if ("string" != typeof t) return 0 === t ? t : +t;
          t = Yn(t);
          var e = mt.test(t);
          return e || yt.test(t) ? hn(t.slice(2), e ? 2 : 8) : dt.test(t) ? p : +t;
        }
        function bu(t) {
          return Sa(t, Ru(t));
        }
        function wu(t) {
          return null == t ? "" : la(t);
        }
        var _u = Oa((function(t, n) {
          if (ki(n) || Zo(n)) Sa(n, Ou(n), t); else for (var e in n) Lt.call(n, e) && er(t, e, n[e]);
        })), xu = Oa((function(t, n) {
          Sa(n, Ru(n), t);
        })), Au = Oa((function(t, n, e, r) {
          Sa(n, Ru(n), t, r);
        })), ku = Oa((function(t, n, e, r) {
          Sa(n, Ou(n), t, r);
        })), ju = ri(ur);
        var Tu = Vr((function(t, n) {
          t = Mt(t);
          var e = -1, a = n.length, i = a > 2 ? n[2] : r;
          for (i && wi(n[0], n[1], i) && (a = 1); ++e < a; ) for (var o = n[e], u = Ru(o), s = -1, c = u.length; ++s < c; ) {
            var l = u[s], f = t[l];
            (f === r || Uo(f, Ot[l]) && !Lt.call(t, l)) && (t[l] = o[l]);
          }
          return t;
        })), Mu = Vr((function(t) {
          return t.push(r, ti), Mn(Lu, r, t);
        }));
        function Cu(t, n, e) {
          var a = null == t ? r : kr(t, n);
          return a === r ? e : a;
        }
        function Iu(t, n) {
          return null != t && mi(t, n, Ir);
        }
        var Eu = Ua((function(t, n, e) {
          null != n && "function" != typeof n.toString && (n = Wt.call(n)), t[n] = e;
        }), es(is)), Su = Ua((function(t, n, e) {
          null != n && "function" != typeof n.toString && (n = Wt.call(n)), Lt.call(t, n) ? t[n].push(e) : t[n] = [ e ];
        }), ci), zu = Vr(Sr);
        function Ou(t) {
          return Zo(t) ? Ve(t) : Pr(t);
        }
        function Ru(t) {
          return Zo(t) ? Ve(t, !0) : Nr(t);
        }
        var qu = Oa((function(t, n, e) {
          $r(t, n, e);
        })), Lu = Oa((function(t, n, e, r) {
          $r(t, n, e, r);
        })), Pu = ri((function(t, n) {
          var e = {};
          if (null == t) return e;
          var r = !1;
          n = qn(n, (function(n) {
            return n = wa(n, t), r || (r = n.length > 1), n;
          })), Sa(t, ii(t), e), r && (e = cr(e, 7, ni));
          for (var a = n.length; a--; ) ha(e, n[a]);
          return e;
        }));
        var Nu = ri((function(t, n) {
          return null == t ? {} : function(t, n) {
            return Gr(t, n, (function(n, e) {
              return Iu(t, e);
            }));
          }(t, n);
        }));
        function Wu(t, n) {
          if (null == t) return {};
          var e = qn(ii(t), (function(t) {
            return [ t ];
          }));
          return n = ci(n), Gr(t, e, (function(t, e) {
            return n(t, e[0]);
          }));
        }
        var Bu = Va(Ou), Fu = Va(Ru);
        function Uu(t) {
          return null == t ? [] : te(t, Ou(t));
        }
        var $u = Pa((function(t, n, e) {
          return n = n.toLowerCase(), t + (e ? Du(n) : n);
        }));
        function Du(t) {
          return Yu(wu(t).toLowerCase());
        }
        function Hu(t) {
          return (t = wu(t)) && t.replace(wt, ie).replace(tn, "");
        }
        var Gu = Pa((function(t, n, e) {
          return t + (e ? "-" : "") + n.toLowerCase();
        })), Ku = Pa((function(t, n, e) {
          return t + (e ? " " : "") + n.toLowerCase();
        })), Zu = La("toLowerCase");
        var Ju = Pa((function(t, n, e) {
          return t + (e ? "_" : "") + n.toLowerCase();
        }));
        var Xu = Pa((function(t, n, e) {
          return t + (e ? " " : "") + Yu(n);
        }));
        var Vu = Pa((function(t, n, e) {
          return t + (e ? " " : "") + n.toUpperCase();
        })), Yu = La("toUpperCase");
        function Qu(t, n, e) {
          return t = wu(t), (n = e ? r : n) === r ? function(t) {
            return an.test(t);
          }(t) ? function(t) {
            return t.match(en) || [];
          }(t) : function(t) {
            return t.match(lt) || [];
          }(t) : t.match(n) || [];
        }
        var ts = Vr((function(t, n) {
          try {
            return Mn(t, r, n);
          } catch (t) {
            return Yo(t) ? t : new kt(t);
          }
        })), ns = ri((function(t, n) {
          return In(n, (function(n) {
            n = Ni(n), or(t, n, So(t[n], t));
          })), t;
        }));
        function es(t) {
          return function() {
            return t;
          };
        }
        var rs = Ba(), as = Ba(!0);
        function is(t) {
          return t;
        }
        function os(t) {
          return Lr("function" == typeof t ? t : cr(t, 1));
        }
        var us = Vr((function(t, n) {
          return function(e) {
            return Sr(e, t, n);
          };
        })), ss = Vr((function(t, n) {
          return function(e) {
            return Sr(t, e, n);
          };
        }));
        function cs(t, n, e) {
          var r = Ou(n), a = Ar(n, r);
          null != e || eu(n) && (a.length || !r.length) || (e = n, n = t, t = this, a = Ar(n, Ou(n)));
          var i = !(eu(e) && "chain" in e && !e.chain), o = Qo(t);
          return In(a, (function(e) {
            var r = n[e];
            t[e] = r, o && (t.prototype[e] = function() {
              var n = this.__chain__;
              if (i || n) {
                var e = t(this.__wrapped__), a = e.__actions__ = Ea(this.__actions__);
                return a.push({
                  func: r,
                  args: arguments,
                  thisArg: t
                }), e.__chain__ = n, e;
              }
              return r.apply(t, Ln([ this.value() ], arguments));
            });
          })), t;
        }
        function ls() {}
        var fs = Da(qn), hs = Da(Sn), gs = Da(Wn);
        function ps(t) {
          return _i(t) ? Kn(Ni(t)) : function(t) {
            return function(n) {
              return kr(n, t);
            };
          }(t);
        }
        var ds = Ga(), ms = Ga(!0);
        function vs() {
          return [];
        }
        function ys() {
          return !1;
        }
        var bs = $a((function(t, n) {
          return t + n;
        }), 0), ws = Ja("ceil"), _s = $a((function(t, n) {
          return t / n;
        }), 1), xs = Ja("floor");
        var As, ks = $a((function(t, n) {
          return t * n;
        }), 1), js = Ja("round"), Ts = $a((function(t, n) {
          return t - n;
        }), 0);
        return Fe.after = function(t, n) {
          if ("function" != typeof n) throw new Et(a);
          return t = mu(t), function() {
            if (--t < 1) return n.apply(this, arguments);
          };
        }, Fe.ary = Io, Fe.assign = _u, Fe.assignIn = xu, Fe.assignInWith = Au, Fe.assignWith = ku, 
        Fe.at = ju, Fe.before = Eo, Fe.bind = So, Fe.bindAll = ns, Fe.bindKey = zo, Fe.castArray = function() {
          if (!arguments.length) return [];
          var t = arguments[0];
          return Go(t) ? t : [ t ];
        }, Fe.chain = go, Fe.chunk = function(t, n, e) {
          n = (e ? wi(t, n, e) : n === r) ? 1 : be(mu(n), 0);
          var a = null == t ? 0 : t.length;
          if (!a || n < 1) return [];
          for (var i = 0, o = 0, u = ot(mn(a / n)); i < a; ) u[o++] = aa(t, i, i += n);
          return u;
        }, Fe.compact = function(t) {
          for (var n = -1, e = null == t ? 0 : t.length, r = 0, a = []; ++n < e; ) {
            var i = t[n];
            i && (a[r++] = i);
          }
          return a;
        }, Fe.concat = function() {
          var t = arguments.length;
          if (!t) return [];
          for (var n = ot(t - 1), e = arguments[0], r = t; r--; ) n[r - 1] = arguments[r];
          return Ln(Go(e) ? Ea(e) : [ e ], yr(n, 1));
        }, Fe.cond = function(t) {
          var n = null == t ? 0 : t.length, e = ci();
          return t = n ? qn(t, (function(t) {
            if ("function" != typeof t[1]) throw new Et(a);
            return [ e(t[0]), t[1] ];
          })) : [], Vr((function(e) {
            for (var r = -1; ++r < n; ) {
              var a = t[r];
              if (Mn(a[0], this, e)) return Mn(a[1], this, e);
            }
          }));
        }, Fe.conforms = function(t) {
          return function(t) {
            var n = Ou(t);
            return function(e) {
              return lr(e, t, n);
            };
          }(cr(t, 1));
        }, Fe.constant = es, Fe.countBy = vo, Fe.create = function(t, n) {
          var e = Ue(t);
          return null == n ? e : ir(e, n);
        }, Fe.curry = function t(n, e, a) {
          var i = Ya(n, 8, r, r, r, r, r, e = a ? r : e);
          return i.placeholder = t.placeholder, i;
        }, Fe.curryRight = function t(n, e, a) {
          var i = Ya(n, u, r, r, r, r, r, e = a ? r : e);
          return i.placeholder = t.placeholder, i;
        }, Fe.debounce = Oo, Fe.defaults = Tu, Fe.defaultsDeep = Mu, Fe.defer = Ro, Fe.delay = qo, 
        Fe.difference = Fi, Fe.differenceBy = Ui, Fe.differenceWith = $i, Fe.drop = function(t, n, e) {
          var a = null == t ? 0 : t.length;
          return a ? aa(t, (n = e || n === r ? 1 : mu(n)) < 0 ? 0 : n, a) : [];
        }, Fe.dropRight = function(t, n, e) {
          var a = null == t ? 0 : t.length;
          return a ? aa(t, 0, (n = a - (n = e || n === r ? 1 : mu(n))) < 0 ? 0 : n) : [];
        }, Fe.dropRightWhile = function(t, n) {
          return t && t.length ? pa(t, ci(n, 3), !0, !0) : [];
        }, Fe.dropWhile = function(t, n) {
          return t && t.length ? pa(t, ci(n, 3), !0) : [];
        }, Fe.fill = function(t, n, e, a) {
          var i = null == t ? 0 : t.length;
          return i ? (e && "number" != typeof e && wi(t, n, e) && (e = 0, a = i), function(t, n, e, a) {
            var i = t.length;
            for ((e = mu(e)) < 0 && (e = -e > i ? 0 : i + e), (a = a === r || a > i ? i : mu(a)) < 0 && (a += i), 
            a = e > a ? 0 : vu(a); e < a; ) t[e++] = n;
            return t;
          }(t, n, e, a)) : [];
        }, Fe.filter = function(t, n) {
          return (Go(t) ? zn : vr)(t, ci(n, 3));
        }, Fe.flatMap = function(t, n) {
          return yr(jo(t, n), 1);
        }, Fe.flatMapDeep = function(t, n) {
          return yr(jo(t, n), h);
        }, Fe.flatMapDepth = function(t, n, e) {
          return e = e === r ? 1 : mu(e), yr(jo(t, n), e);
        }, Fe.flatten = Gi, Fe.flattenDeep = function(t) {
          return (null == t ? 0 : t.length) ? yr(t, h) : [];
        }, Fe.flattenDepth = function(t, n) {
          return (null == t ? 0 : t.length) ? yr(t, n = n === r ? 1 : mu(n)) : [];
        }, Fe.flip = function(t) {
          return Ya(t, 512);
        }, Fe.flow = rs, Fe.flowRight = as, Fe.fromPairs = function(t) {
          for (var n = -1, e = null == t ? 0 : t.length, r = {}; ++n < e; ) {
            var a = t[n];
            r[a[0]] = a[1];
          }
          return r;
        }, Fe.functions = function(t) {
          return null == t ? [] : Ar(t, Ou(t));
        }, Fe.functionsIn = function(t) {
          return null == t ? [] : Ar(t, Ru(t));
        }, Fe.groupBy = xo, Fe.initial = function(t) {
          return (null == t ? 0 : t.length) ? aa(t, 0, -1) : [];
        }, Fe.intersection = Zi, Fe.intersectionBy = Ji, Fe.intersectionWith = Xi, Fe.invert = Eu, 
        Fe.invertBy = Su, Fe.invokeMap = Ao, Fe.iteratee = os, Fe.keyBy = ko, Fe.keys = Ou, 
        Fe.keysIn = Ru, Fe.map = jo, Fe.mapKeys = function(t, n) {
          var e = {};
          return n = ci(n, 3), _r(t, (function(t, r, a) {
            or(e, n(t, r, a), t);
          })), e;
        }, Fe.mapValues = function(t, n) {
          var e = {};
          return n = ci(n, 3), _r(t, (function(t, r, a) {
            or(e, r, n(t, r, a));
          })), e;
        }, Fe.matches = function(t) {
          return Fr(cr(t, 1));
        }, Fe.matchesProperty = function(t, n) {
          return Ur(t, cr(n, 1));
        }, Fe.memoize = Lo, Fe.merge = qu, Fe.mergeWith = Lu, Fe.method = us, Fe.methodOf = ss, 
        Fe.mixin = cs, Fe.negate = Po, Fe.nthArg = function(t) {
          return t = mu(t), Vr((function(n) {
            return Dr(n, t);
          }));
        }, Fe.omit = Pu, Fe.omitBy = function(t, n) {
          return Wu(t, Po(ci(n)));
        }, Fe.once = function(t) {
          return Eo(2, t);
        }, Fe.orderBy = function(t, n, e, a) {
          return null == t ? [] : (Go(n) || (n = null == n ? [] : [ n ]), Go(e = a ? r : e) || (e = null == e ? [] : [ e ]), 
          Hr(t, n, e));
        }, Fe.over = fs, Fe.overArgs = No, Fe.overEvery = hs, Fe.overSome = gs, Fe.partial = Wo, 
        Fe.partialRight = Bo, Fe.partition = To, Fe.pick = Nu, Fe.pickBy = Wu, Fe.property = ps, 
        Fe.propertyOf = function(t) {
          return function(n) {
            return null == t ? r : kr(t, n);
          };
        }, Fe.pull = Yi, Fe.pullAll = Qi, Fe.pullAllBy = function(t, n, e) {
          return t && t.length && n && n.length ? Kr(t, n, ci(e, 2)) : t;
        }, Fe.pullAllWith = function(t, n, e) {
          return t && t.length && n && n.length ? Kr(t, n, r, e) : t;
        }, Fe.pullAt = to, Fe.range = ds, Fe.rangeRight = ms, Fe.rearg = Fo, Fe.reject = function(t, n) {
          return (Go(t) ? zn : vr)(t, Po(ci(n, 3)));
        }, Fe.remove = function(t, n) {
          var e = [];
          if (!t || !t.length) return e;
          var r = -1, a = [], i = t.length;
          for (n = ci(n, 3); ++r < i; ) {
            var o = t[r];
            n(o, r, t) && (e.push(o), a.push(r));
          }
          return Zr(t, a), e;
        }, Fe.rest = function(t, n) {
          if ("function" != typeof t) throw new Et(a);
          return Vr(t, n = n === r ? n : mu(n));
        }, Fe.reverse = no, Fe.sampleSize = function(t, n, e) {
          return n = (e ? wi(t, n, e) : n === r) ? 1 : mu(n), (Go(t) ? Qe : Qr)(t, n);
        }, Fe.set = function(t, n, e) {
          return null == t ? t : ta(t, n, e);
        }, Fe.setWith = function(t, n, e, a) {
          return a = "function" == typeof a ? a : r, null == t ? t : ta(t, n, e, a);
        }, Fe.shuffle = function(t) {
          return (Go(t) ? tr : ra)(t);
        }, Fe.slice = function(t, n, e) {
          var a = null == t ? 0 : t.length;
          return a ? (e && "number" != typeof e && wi(t, n, e) ? (n = 0, e = a) : (n = null == n ? 0 : mu(n), 
          e = e === r ? a : mu(e)), aa(t, n, e)) : [];
        }, Fe.sortBy = Mo, Fe.sortedUniq = function(t) {
          return t && t.length ? sa(t) : [];
        }, Fe.sortedUniqBy = function(t, n) {
          return t && t.length ? sa(t, ci(n, 2)) : [];
        }, Fe.split = function(t, n, e) {
          return e && "number" != typeof e && wi(t, n, e) && (n = e = r), (e = e === r ? d : e >>> 0) ? (t = wu(t)) && ("string" == typeof n || null != n && !uu(n)) && !(n = la(n)) && se(t) ? xa(pe(t), 0, e) : t.split(n, e) : [];
        }, Fe.spread = function(t, n) {
          if ("function" != typeof t) throw new Et(a);
          return n = null == n ? 0 : be(mu(n), 0), Vr((function(e) {
            var r = e[n], a = xa(e, 0, n);
            return r && Ln(a, r), Mn(t, this, a);
          }));
        }, Fe.tail = function(t) {
          var n = null == t ? 0 : t.length;
          return n ? aa(t, 1, n) : [];
        }, Fe.take = function(t, n, e) {
          return t && t.length ? aa(t, 0, (n = e || n === r ? 1 : mu(n)) < 0 ? 0 : n) : [];
        }, Fe.takeRight = function(t, n, e) {
          var a = null == t ? 0 : t.length;
          return a ? aa(t, (n = a - (n = e || n === r ? 1 : mu(n))) < 0 ? 0 : n, a) : [];
        }, Fe.takeRightWhile = function(t, n) {
          return t && t.length ? pa(t, ci(n, 3), !1, !0) : [];
        }, Fe.takeWhile = function(t, n) {
          return t && t.length ? pa(t, ci(n, 3)) : [];
        }, Fe.tap = function(t, n) {
          return n(t), t;
        }, Fe.throttle = function(t, n, e) {
          var r = !0, i = !0;
          if ("function" != typeof t) throw new Et(a);
          return eu(e) && (r = "leading" in e ? !!e.leading : r, i = "trailing" in e ? !!e.trailing : i), 
          Oo(t, n, {
            leading: r,
            maxWait: n,
            trailing: i
          });
        }, Fe.thru = po, Fe.toArray = pu, Fe.toPairs = Bu, Fe.toPairsIn = Fu, Fe.toPath = function(t) {
          return Go(t) ? qn(t, Ni) : lu(t) ? [ t ] : Ea(Pi(wu(t)));
        }, Fe.toPlainObject = bu, Fe.transform = function(t, n, e) {
          var r = Go(t), a = r || Xo(t) || fu(t);
          if (n = ci(n, 4), null == e) {
            var i = t && t.constructor;
            e = a ? r ? new i : [] : eu(t) && Qo(i) ? Ue(Kt(t)) : {};
          }
          return (a ? In : _r)(t, (function(t, r, a) {
            return n(e, t, r, a);
          })), e;
        }, Fe.unary = function(t) {
          return Io(t, 1);
        }, Fe.union = eo, Fe.unionBy = ro, Fe.unionWith = ao, Fe.uniq = function(t) {
          return t && t.length ? fa(t) : [];
        }, Fe.uniqBy = function(t, n) {
          return t && t.length ? fa(t, ci(n, 2)) : [];
        }, Fe.uniqWith = function(t, n) {
          return n = "function" == typeof n ? n : r, t && t.length ? fa(t, r, n) : [];
        }, Fe.unset = function(t, n) {
          return null == t || ha(t, n);
        }, Fe.unzip = io, Fe.unzipWith = oo, Fe.update = function(t, n, e) {
          return null == t ? t : ga(t, n, ba(e));
        }, Fe.updateWith = function(t, n, e, a) {
          return a = "function" == typeof a ? a : r, null == t ? t : ga(t, n, ba(e), a);
        }, Fe.values = Uu, Fe.valuesIn = function(t) {
          return null == t ? [] : te(t, Ru(t));
        }, Fe.without = uo, Fe.words = Qu, Fe.wrap = function(t, n) {
          return Wo(ba(n), t);
        }, Fe.xor = so, Fe.xorBy = co, Fe.xorWith = lo, Fe.zip = fo, Fe.zipObject = function(t, n) {
          return va(t || [], n || [], er);
        }, Fe.zipObjectDeep = function(t, n) {
          return va(t || [], n || [], ta);
        }, Fe.zipWith = ho, Fe.entries = Bu, Fe.entriesIn = Fu, Fe.extend = xu, Fe.extendWith = Au, 
        cs(Fe, Fe), Fe.add = bs, Fe.attempt = ts, Fe.camelCase = $u, Fe.capitalize = Du, 
        Fe.ceil = ws, Fe.clamp = function(t, n, e) {
          return e === r && (e = n, n = r), e !== r && (e = (e = yu(e)) == e ? e : 0), n !== r && (n = (n = yu(n)) == n ? n : 0), 
          sr(yu(t), n, e);
        }, Fe.clone = function(t) {
          return cr(t, 4);
        }, Fe.cloneDeep = function(t) {
          return cr(t, 5);
        }, Fe.cloneDeepWith = function(t, n) {
          return cr(t, 5, n = "function" == typeof n ? n : r);
        }, Fe.cloneWith = function(t, n) {
          return cr(t, 4, n = "function" == typeof n ? n : r);
        }, Fe.conformsTo = function(t, n) {
          return null == n || lr(t, n, Ou(n));
        }, Fe.deburr = Hu, Fe.defaultTo = function(t, n) {
          return null == t || t != t ? n : t;
        }, Fe.divide = _s, Fe.endsWith = function(t, n, e) {
          t = wu(t), n = la(n);
          var a = t.length, i = e = e === r ? a : sr(mu(e), 0, a);
          return (e -= n.length) >= 0 && t.slice(e, i) == n;
        }, Fe.eq = Uo, Fe.escape = function(t) {
          return (t = wu(t)) && X.test(t) ? t.replace(Z, oe) : t;
        }, Fe.escapeRegExp = function(t) {
          return (t = wu(t)) && at.test(t) ? t.replace(rt, "\\$&") : t;
        }, Fe.every = function(t, n, e) {
          var a = Go(t) ? Sn : dr;
          return e && wi(t, n, e) && (n = r), a(t, ci(n, 3));
        }, Fe.find = yo, Fe.findIndex = Di, Fe.findKey = function(t, n) {
          return Fn(t, ci(n, 3), _r);
        }, Fe.findLast = bo, Fe.findLastIndex = Hi, Fe.findLastKey = function(t, n) {
          return Fn(t, ci(n, 3), xr);
        }, Fe.floor = xs, Fe.forEach = wo, Fe.forEachRight = _o, Fe.forIn = function(t, n) {
          return null == t ? t : br(t, ci(n, 3), Ru);
        }, Fe.forInRight = function(t, n) {
          return null == t ? t : wr(t, ci(n, 3), Ru);
        }, Fe.forOwn = function(t, n) {
          return t && _r(t, ci(n, 3));
        }, Fe.forOwnRight = function(t, n) {
          return t && xr(t, ci(n, 3));
        }, Fe.get = Cu, Fe.gt = $o, Fe.gte = Do, Fe.has = function(t, n) {
          return null != t && mi(t, n, Cr);
        }, Fe.hasIn = Iu, Fe.head = Ki, Fe.identity = is, Fe.includes = function(t, n, e, r) {
          t = Zo(t) ? t : Uu(t), e = e && !r ? mu(e) : 0;
          var a = t.length;
          return e < 0 && (e = be(a + e, 0)), cu(t) ? e <= a && t.indexOf(n, e) > -1 : !!a && $n(t, n, e) > -1;
        }, Fe.indexOf = function(t, n, e) {
          var r = null == t ? 0 : t.length;
          if (!r) return -1;
          var a = null == e ? 0 : mu(e);
          return a < 0 && (a = be(r + a, 0)), $n(t, n, a);
        }, Fe.inRange = function(t, n, e) {
          return n = du(n), e === r ? (e = n, n = 0) : e = du(e), function(t, n, e) {
            return t >= we(n, e) && t < be(n, e);
          }(t = yu(t), n, e);
        }, Fe.invoke = zu, Fe.isArguments = Ho, Fe.isArray = Go, Fe.isArrayBuffer = Ko, 
        Fe.isArrayLike = Zo, Fe.isArrayLikeObject = Jo, Fe.isBoolean = function(t) {
          return !0 === t || !1 === t || ru(t) && Tr(t) == b;
        }, Fe.isBuffer = Xo, Fe.isDate = Vo, Fe.isElement = function(t) {
          return ru(t) && 1 === t.nodeType && !ou(t);
        }, Fe.isEmpty = function(t) {
          if (null == t) return !0;
          if (Zo(t) && (Go(t) || "string" == typeof t || "function" == typeof t.splice || Xo(t) || fu(t) || Ho(t))) return !t.length;
          var n = di(t);
          if (n == k || n == I) return !t.size;
          if (ki(t)) return !Pr(t).length;
          for (var e in t) if (Lt.call(t, e)) return !1;
          return !0;
        }, Fe.isEqual = function(t, n) {
          return Or(t, n);
        }, Fe.isEqualWith = function(t, n, e) {
          var a = (e = "function" == typeof e ? e : r) ? e(t, n) : r;
          return a === r ? Or(t, n, r, e) : !!a;
        }, Fe.isError = Yo, Fe.isFinite = function(t) {
          return "number" == typeof t && Bn(t);
        }, Fe.isFunction = Qo, Fe.isInteger = tu, Fe.isLength = nu, Fe.isMap = au, Fe.isMatch = function(t, n) {
          return t === n || Rr(t, n, fi(n));
        }, Fe.isMatchWith = function(t, n, e) {
          return e = "function" == typeof e ? e : r, Rr(t, n, fi(n), e);
        }, Fe.isNaN = function(t) {
          return iu(t) && t != +t;
        }, Fe.isNative = function(t) {
          if (Ai(t)) throw new kt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");
          return qr(t);
        }, Fe.isNil = function(t) {
          return null == t;
        }, Fe.isNull = function(t) {
          return null === t;
        }, Fe.isNumber = iu, Fe.isObject = eu, Fe.isObjectLike = ru, Fe.isPlainObject = ou, 
        Fe.isRegExp = uu, Fe.isSafeInteger = function(t) {
          return tu(t) && t >= -9007199254740991 && t <= g;
        }, Fe.isSet = su, Fe.isString = cu, Fe.isSymbol = lu, Fe.isTypedArray = fu, Fe.isUndefined = function(t) {
          return t === r;
        }, Fe.isWeakMap = function(t) {
          return ru(t) && di(t) == z;
        }, Fe.isWeakSet = function(t) {
          return ru(t) && "[object WeakSet]" == Tr(t);
        }, Fe.join = function(t, n) {
          return null == t ? "" : Zn.call(t, n);
        }, Fe.kebabCase = Gu, Fe.last = Vi, Fe.lastIndexOf = function(t, n, e) {
          var a = null == t ? 0 : t.length;
          if (!a) return -1;
          var i = a;
          return e !== r && (i = (i = mu(e)) < 0 ? be(a + i, 0) : we(i, a - 1)), n == n ? function(t, n, e) {
            for (var r = e + 1; r--; ) if (t[r] === n) return r;
            return r;
          }(t, n, i) : Un(t, Hn, i, !0);
        }, Fe.lowerCase = Ku, Fe.lowerFirst = Zu, Fe.lt = hu, Fe.lte = gu, Fe.max = function(t) {
          return t && t.length ? mr(t, is, Mr) : r;
        }, Fe.maxBy = function(t, n) {
          return t && t.length ? mr(t, ci(n, 2), Mr) : r;
        }, Fe.mean = function(t) {
          return Gn(t, is);
        }, Fe.meanBy = function(t, n) {
          return Gn(t, ci(n, 2));
        }, Fe.min = function(t) {
          return t && t.length ? mr(t, is, Wr) : r;
        }, Fe.minBy = function(t, n) {
          return t && t.length ? mr(t, ci(n, 2), Wr) : r;
        }, Fe.stubArray = vs, Fe.stubFalse = ys, Fe.stubObject = function() {
          return {};
        }, Fe.stubString = function() {
          return "";
        }, Fe.stubTrue = function() {
          return !0;
        }, Fe.multiply = ks, Fe.nth = function(t, n) {
          return t && t.length ? Dr(t, mu(n)) : r;
        }, Fe.noConflict = function() {
          return dn._ === this && (dn._ = Ft), this;
        }, Fe.noop = ls, Fe.now = Co, Fe.pad = function(t, n, e) {
          t = wu(t);
          var r = (n = mu(n)) ? ge(t) : 0;
          if (!n || r >= n) return t;
          var a = (n - r) / 2;
          return Ha(vn(a), e) + t + Ha(mn(a), e);
        }, Fe.padEnd = function(t, n, e) {
          t = wu(t);
          var r = (n = mu(n)) ? ge(t) : 0;
          return n && r < n ? t + Ha(n - r, e) : t;
        }, Fe.padStart = function(t, n, e) {
          t = wu(t);
          var r = (n = mu(n)) ? ge(t) : 0;
          return n && r < n ? Ha(n - r, e) + t : t;
        }, Fe.parseInt = function(t, n, e) {
          return e || null == n ? n = 0 : n && (n = +n), xe(wu(t).replace(it, ""), n || 0);
        }, Fe.random = function(t, n, e) {
          if (e && "boolean" != typeof e && wi(t, n, e) && (n = e = r), e === r && ("boolean" == typeof n ? (e = n, 
          n = r) : "boolean" == typeof t && (e = t, t = r)), t === r && n === r ? (t = 0, 
          n = 1) : (t = du(t), n === r ? (n = t, t = 0) : n = du(n)), t > n) {
            var a = t;
            t = n, n = a;
          }
          if (e || t % 1 || n % 1) {
            var i = Ae();
            return we(t + i * (n - t + fn("1e-" + ((i + "").length - 1))), n);
          }
          return Jr(t, n);
        }, Fe.reduce = function(t, n, e) {
          var r = Go(t) ? Pn : Jn, a = arguments.length < 3;
          return r(t, ci(n, 4), e, a, gr);
        }, Fe.reduceRight = function(t, n, e) {
          var r = Go(t) ? Nn : Jn, a = arguments.length < 3;
          return r(t, ci(n, 4), e, a, pr);
        }, Fe.repeat = function(t, n, e) {
          return n = (e ? wi(t, n, e) : n === r) ? 1 : mu(n), Xr(wu(t), n);
        }, Fe.replace = function() {
          var t = arguments, n = wu(t[0]);
          return t.length < 3 ? n : n.replace(t[1], t[2]);
        }, Fe.result = function(t, n, e) {
          var a = -1, i = (n = wa(n, t)).length;
          for (i || (i = 1, t = r); ++a < i; ) {
            var o = null == t ? r : t[Ni(n[a])];
            o === r && (a = i, o = e), t = Qo(o) ? o.call(t) : o;
          }
          return t;
        }, Fe.round = js, Fe.runInContext = t, Fe.sample = function(t) {
          return (Go(t) ? Ye : Yr)(t);
        }, Fe.size = function(t) {
          if (null == t) return 0;
          if (Zo(t)) return cu(t) ? ge(t) : t.length;
          var n = di(t);
          return n == k || n == I ? t.size : Pr(t).length;
        }, Fe.snakeCase = Ju, Fe.some = function(t, n, e) {
          var a = Go(t) ? Wn : ia;
          return e && wi(t, n, e) && (n = r), a(t, ci(n, 3));
        }, Fe.sortedIndex = function(t, n) {
          return oa(t, n);
        }, Fe.sortedIndexBy = function(t, n, e) {
          return ua(t, n, ci(e, 2));
        }, Fe.sortedIndexOf = function(t, n) {
          var e = null == t ? 0 : t.length;
          if (e) {
            var r = oa(t, n);
            if (r < e && Uo(t[r], n)) return r;
          }
          return -1;
        }, Fe.sortedLastIndex = function(t, n) {
          return oa(t, n, !0);
        }, Fe.sortedLastIndexBy = function(t, n, e) {
          return ua(t, n, ci(e, 2), !0);
        }, Fe.sortedLastIndexOf = function(t, n) {
          if (null == t ? 0 : t.length) {
            var e = oa(t, n, !0) - 1;
            if (Uo(t[e], n)) return e;
          }
          return -1;
        }, Fe.startCase = Xu, Fe.startsWith = function(t, n, e) {
          return t = wu(t), e = null == e ? 0 : sr(mu(e), 0, t.length), n = la(n), t.slice(e, e + n.length) == n;
        }, Fe.subtract = Ts, Fe.sum = function(t) {
          return t && t.length ? Xn(t, is) : 0;
        }, Fe.sumBy = function(t, n) {
          return t && t.length ? Xn(t, ci(n, 2)) : 0;
        }, Fe.template = function(t, n, e) {
          var a = Fe.templateSettings;
          e && wi(t, n, e) && (n = r), t = wu(t), n = Au({}, n, a, Qa);
          var i, o, u = Au({}, n.imports, a.imports, Qa), s = Ou(u), c = te(u, s), l = 0, f = n.interpolate || _t, h = "__p += '", g = Ct((n.escape || _t).source + "|" + f.source + "|" + (f === Q ? gt : _t).source + "|" + (n.evaluate || _t).source + "|$", "g"), p = "//# sourceURL=" + (Lt.call(n, "sourceURL") ? (n.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++un + "]") + "\n";
          t.replace(g, (function(n, e, r, a, u, s) {
            return r || (r = a), h += t.slice(l, s).replace(xt, ue), e && (i = !0, h += "' +\n__e(" + e + ") +\n'"), 
            u && (o = !0, h += "';\n" + u + ";\n__p += '"), r && (h += "' +\n((__t = (" + r + ")) == null ? '' : __t) +\n'"), 
            l = s + n.length, n;
          })), h += "';\n";
          var d = Lt.call(n, "variable") && n.variable;
          if (d) {
            if (ft.test(d)) throw new kt("Invalid `variable` option passed into `_.template`");
          } else h = "with (obj) {\n" + h + "\n}\n";
          h = (o ? h.replace(D, "") : h).replace(H, "$1").replace(G, "$1;"), h = "function(" + (d || "obj") + ") {\n" + (d ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (i ? ", __e = _.escape" : "") + (o ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + h + "return __p\n}";
          var m = ts((function() {
            return jt(s, p + "return " + h).apply(r, c);
          }));
          if (m.source = h, Yo(m)) throw m;
          return m;
        }, Fe.times = function(t, n) {
          if ((t = mu(t)) < 1 || t > g) return [];
          var e = d, r = we(t, d);
          n = ci(n), t -= d;
          for (var a = Vn(r, n); ++e < t; ) n(e);
          return a;
        }, Fe.toFinite = du, Fe.toInteger = mu, Fe.toLength = vu, Fe.toLower = function(t) {
          return wu(t).toLowerCase();
        }, Fe.toNumber = yu, Fe.toSafeInteger = function(t) {
          return t ? sr(mu(t), -9007199254740991, g) : 0 === t ? t : 0;
        }, Fe.toString = wu, Fe.toUpper = function(t) {
          return wu(t).toUpperCase();
        }, Fe.trim = function(t, n, e) {
          if ((t = wu(t)) && (e || n === r)) return Yn(t);
          if (!t || !(n = la(n))) return t;
          var a = pe(t), i = pe(n);
          return xa(a, ee(a, i), re(a, i) + 1).join("");
        }, Fe.trimEnd = function(t, n, e) {
          if ((t = wu(t)) && (e || n === r)) return t.slice(0, de(t) + 1);
          if (!t || !(n = la(n))) return t;
          var a = pe(t);
          return xa(a, 0, re(a, pe(n)) + 1).join("");
        }, Fe.trimStart = function(t, n, e) {
          if ((t = wu(t)) && (e || n === r)) return t.replace(it, "");
          if (!t || !(n = la(n))) return t;
          var a = pe(t);
          return xa(a, ee(a, pe(n))).join("");
        }, Fe.truncate = function(t, n) {
          var e = 30, a = "...";
          if (eu(n)) {
            var i = "separator" in n ? n.separator : i;
            e = "length" in n ? mu(n.length) : e, a = "omission" in n ? la(n.omission) : a;
          }
          var o = (t = wu(t)).length;
          if (se(t)) {
            var u = pe(t);
            o = u.length;
          }
          if (e >= o) return t;
          var s = e - ge(a);
          if (s < 1) return a;
          var c = u ? xa(u, 0, s).join("") : t.slice(0, s);
          if (i === r) return c + a;
          if (u && (s += c.length - s), uu(i)) {
            if (t.slice(s).search(i)) {
              var l, f = c;
              for (i.global || (i = Ct(i.source, wu(pt.exec(i)) + "g")), i.lastIndex = 0; l = i.exec(f); ) var h = l.index;
              c = c.slice(0, h === r ? s : h);
            }
          } else if (t.indexOf(la(i), s) != s) {
            var g = c.lastIndexOf(i);
            g > -1 && (c = c.slice(0, g));
          }
          return c + a;
        }, Fe.unescape = function(t) {
          return (t = wu(t)) && J.test(t) ? t.replace(K, me) : t;
        }, Fe.uniqueId = function(t) {
          var n = ++Pt;
          return wu(t) + n;
        }, Fe.upperCase = Vu, Fe.upperFirst = Yu, Fe.each = wo, Fe.eachRight = _o, Fe.first = Ki, 
        cs(Fe, (As = {}, _r(Fe, (function(t, n) {
          Lt.call(Fe.prototype, n) || (As[n] = t);
        })), As), {
          chain: !1
        }), Fe.VERSION = "4.17.21", In([ "bind", "bindKey", "curry", "curryRight", "partial", "partialRight" ], (function(t) {
          Fe[t].placeholder = Fe;
        })), In([ "drop", "take" ], (function(t, n) {
          He.prototype[t] = function(e) {
            e = e === r ? 1 : be(mu(e), 0);
            var a = this.__filtered__ && !n ? new He(this) : this.clone();
            return a.__filtered__ ? a.__takeCount__ = we(e, a.__takeCount__) : a.__views__.push({
              size: we(e, d),
              type: t + (a.__dir__ < 0 ? "Right" : "")
            }), a;
          }, He.prototype[t + "Right"] = function(n) {
            return this.reverse()[t](n).reverse();
          };
        })), In([ "filter", "map", "takeWhile" ], (function(t, n) {
          var e = n + 1, r = 1 == e || 3 == e;
          He.prototype[t] = function(t) {
            var n = this.clone();
            return n.__iteratees__.push({
              iteratee: ci(t, 3),
              type: e
            }), n.__filtered__ = n.__filtered__ || r, n;
          };
        })), In([ "head", "last" ], (function(t, n) {
          var e = "take" + (n ? "Right" : "");
          He.prototype[t] = function() {
            return this[e](1).value()[0];
          };
        })), In([ "initial", "tail" ], (function(t, n) {
          var e = "drop" + (n ? "" : "Right");
          He.prototype[t] = function() {
            return this.__filtered__ ? new He(this) : this[e](1);
          };
        })), He.prototype.compact = function() {
          return this.filter(is);
        }, He.prototype.find = function(t) {
          return this.filter(t).head();
        }, He.prototype.findLast = function(t) {
          return this.reverse().find(t);
        }, He.prototype.invokeMap = Vr((function(t, n) {
          return "function" == typeof t ? new He(this) : this.map((function(e) {
            return Sr(e, t, n);
          }));
        })), He.prototype.reject = function(t) {
          return this.filter(Po(ci(t)));
        }, He.prototype.slice = function(t, n) {
          t = mu(t);
          var e = this;
          return e.__filtered__ && (t > 0 || n < 0) ? new He(e) : (t < 0 ? e = e.takeRight(-t) : t && (e = e.drop(t)), 
          n !== r && (e = (n = mu(n)) < 0 ? e.dropRight(-n) : e.take(n - t)), e);
        }, He.prototype.takeRightWhile = function(t) {
          return this.reverse().takeWhile(t).reverse();
        }, He.prototype.toArray = function() {
          return this.take(d);
        }, _r(He.prototype, (function(t, n) {
          var e = /^(?:filter|find|map|reject)|While$/.test(n), a = /^(?:head|last)$/.test(n), i = Fe[a ? "take" + ("last" == n ? "Right" : "") : n], o = a || /^find/.test(n);
          i && (Fe.prototype[n] = function() {
            var n = this.__wrapped__, u = a ? [ 1 ] : arguments, s = n instanceof He, c = u[0], l = s || Go(n), f = function(t) {
              var n = i.apply(Fe, Ln([ t ], u));
              return a && h ? n[0] : n;
            };
            l && e && "function" == typeof c && 1 != c.length && (s = l = !1);
            var h = this.__chain__, g = !!this.__actions__.length, p = o && !h, d = s && !g;
            if (!o && l) {
              n = d ? n : new He(this);
              var m = t.apply(n, u);
              return m.__actions__.push({
                func: po,
                args: [ f ],
                thisArg: r
              }), new De(m, h);
            }
            return p && d ? t.apply(this, u) : (m = this.thru(f), p ? a ? m.value()[0] : m.value() : m);
          });
        })), In([ "pop", "push", "shift", "sort", "splice", "unshift" ], (function(t) {
          var n = St[t], e = /^(?:push|sort|unshift)$/.test(t) ? "tap" : "thru", r = /^(?:pop|shift)$/.test(t);
          Fe.prototype[t] = function() {
            var t = arguments;
            if (r && !this.__chain__) {
              var a = this.value();
              return n.apply(Go(a) ? a : [], t);
            }
            return this[e]((function(e) {
              return n.apply(Go(e) ? e : [], t);
            }));
          };
        })), _r(He.prototype, (function(t, n) {
          var e = Fe[n];
          if (e) {
            var r = e.name + "";
            Lt.call(ze, r) || (ze[r] = []), ze[r].push({
              name: n,
              func: e
            });
          }
        })), ze[Fa(r, 2).name] = [ {
          name: "wrapper",
          func: r
        } ], He.prototype.clone = function() {
          var t = new He(this.__wrapped__);
          return t.__actions__ = Ea(this.__actions__), t.__dir__ = this.__dir__, t.__filtered__ = this.__filtered__, 
          t.__iteratees__ = Ea(this.__iteratees__), t.__takeCount__ = this.__takeCount__, 
          t.__views__ = Ea(this.__views__), t;
        }, He.prototype.reverse = function() {
          if (this.__filtered__) {
            var t = new He(this);
            t.__dir__ = -1, t.__filtered__ = !0;
          } else (t = this.clone()).__dir__ *= -1;
          return t;
        }, He.prototype.value = function() {
          var t = this.__wrapped__.value(), n = this.__dir__, e = Go(t), r = n < 0, a = e ? t.length : 0, i = function(t, n, e) {
            var r = -1, a = e.length;
            for (;++r < a; ) {
              var i = e[r], o = i.size;
              switch (i.type) {
               case "drop":
                t += o;
                break;

               case "dropRight":
                n -= o;
                break;

               case "take":
                n = we(n, t + o);
                break;

               case "takeRight":
                t = be(t, n - o);
              }
            }
            return {
              start: t,
              end: n
            };
          }(0, a, this.__views__), o = i.start, u = i.end, s = u - o, c = r ? u : o - 1, l = this.__iteratees__, f = l.length, h = 0, g = we(s, this.__takeCount__);
          if (!e || !r && a == s && g == s) return da(t, this.__actions__);
          var p = [];
          t: for (;s-- && h < g; ) {
            for (var d = -1, m = t[c += n]; ++d < f; ) {
              var v = l[d], y = v.iteratee, b = v.type, w = y(m);
              if (2 == b) m = w; else if (!w) {
                if (1 == b) continue t;
                break t;
              }
            }
            p[h++] = m;
          }
          return p;
        }, Fe.prototype.at = mo, Fe.prototype.chain = function() {
          return go(this);
        }, Fe.prototype.commit = function() {
          return new De(this.value(), this.__chain__);
        }, Fe.prototype.next = function() {
          this.__values__ === r && (this.__values__ = pu(this.value()));
          var t = this.__index__ >= this.__values__.length;
          return {
            done: t,
            value: t ? r : this.__values__[this.__index__++]
          };
        }, Fe.prototype.plant = function(t) {
          for (var n, e = this; e instanceof $e; ) {
            var a = Bi(e);
            a.__index__ = 0, a.__values__ = r, n ? i.__wrapped__ = a : n = a;
            var i = a;
            e = e.__wrapped__;
          }
          return i.__wrapped__ = t, n;
        }, Fe.prototype.reverse = function() {
          var t = this.__wrapped__;
          if (t instanceof He) {
            var n = t;
            return this.__actions__.length && (n = new He(this)), (n = n.reverse()).__actions__.push({
              func: po,
              args: [ no ],
              thisArg: r
            }), new De(n, this.__chain__);
          }
          return this.thru(no);
        }, Fe.prototype.toJSON = Fe.prototype.valueOf = Fe.prototype.value = function() {
          return da(this.__wrapped__, this.__actions__);
        }, Fe.prototype.first = Fe.prototype.head, Yt && (Fe.prototype[Yt] = function() {
          return this;
        }), Fe;
      }();
      "function" == typeof define && "object" == typeof define.amd && define.amd ? (dn._ = ve, 
      define((function() {
        return ve;
      }))) : vn ? ((vn.exports = ve)._ = ve, mn._ = ve) : dn._ = ve;
    }).call(this);
  })), i("aCBW2").register(JSON.parse('{"2xXxC":"background.c37f66b3.js","eDuZR":"icon48.c254de62.png","ib01S":"icon128.7f544e21.png","aqImY":"icon.1eb08798.svg","3an9X":"icon-keyboard-clicking48.ba63116d.png","2T6ly":"offscreen.4471d2b7.html","a4etS":"offscreen.86fbd6ce.js","bzwoj":"whatsNew.bc02af78.html","1AIAE":"whatsNew.f3afe381.css","bYGSi":"onboarding.9f1b2119.html"}'));
  var o, u, s = i("1t74G"), c = (s = i("1t74G"), {});
  u = {
    aliceblue: [ 240, 248, 255 ],
    antiquewhite: [ 250, 235, 215 ],
    aqua: [ 0, 255, 255 ],
    aquamarine: [ 127, 255, 212 ],
    azure: [ 240, 255, 255 ],
    beige: [ 245, 245, 220 ],
    bisque: [ 255, 228, 196 ],
    black: [ 0, 0, 0 ],
    blanchedalmond: [ 255, 235, 205 ],
    blue: [ 0, 0, 255 ],
    blueviolet: [ 138, 43, 226 ],
    brown: [ 165, 42, 42 ],
    burlywood: [ 222, 184, 135 ],
    cadetblue: [ 95, 158, 160 ],
    chartreuse: [ 127, 255, 0 ],
    chocolate: [ 210, 105, 30 ],
    coral: [ 255, 127, 80 ],
    cornflowerblue: [ 100, 149, 237 ],
    cornsilk: [ 255, 248, 220 ],
    crimson: [ 220, 20, 60 ],
    cyan: [ 0, 255, 255 ],
    darkblue: [ 0, 0, 139 ],
    darkcyan: [ 0, 139, 139 ],
    darkgoldenrod: [ 184, 134, 11 ],
    darkgray: [ 169, 169, 169 ],
    darkgreen: [ 0, 100, 0 ],
    darkgrey: [ 169, 169, 169 ],
    darkkhaki: [ 189, 183, 107 ],
    darkmagenta: [ 139, 0, 139 ],
    darkolivegreen: [ 85, 107, 47 ],
    darkorange: [ 255, 140, 0 ],
    darkorchid: [ 153, 50, 204 ],
    darkred: [ 139, 0, 0 ],
    darksalmon: [ 233, 150, 122 ],
    darkseagreen: [ 143, 188, 143 ],
    darkslateblue: [ 72, 61, 139 ],
    darkslategray: [ 47, 79, 79 ],
    darkslategrey: [ 47, 79, 79 ],
    darkturquoise: [ 0, 206, 209 ],
    darkviolet: [ 148, 0, 211 ],
    deeppink: [ 255, 20, 147 ],
    deepskyblue: [ 0, 191, 255 ],
    dimgray: [ 105, 105, 105 ],
    dimgrey: [ 105, 105, 105 ],
    dodgerblue: [ 30, 144, 255 ],
    firebrick: [ 178, 34, 34 ],
    floralwhite: [ 255, 250, 240 ],
    forestgreen: [ 34, 139, 34 ],
    fuchsia: [ 255, 0, 255 ],
    gainsboro: [ 220, 220, 220 ],
    ghostwhite: [ 248, 248, 255 ],
    gold: [ 255, 215, 0 ],
    goldenrod: [ 218, 165, 32 ],
    gray: [ 128, 128, 128 ],
    green: [ 0, 128, 0 ],
    greenyellow: [ 173, 255, 47 ],
    grey: [ 128, 128, 128 ],
    honeydew: [ 240, 255, 240 ],
    hotpink: [ 255, 105, 180 ],
    indianred: [ 205, 92, 92 ],
    indigo: [ 75, 0, 130 ],
    ivory: [ 255, 255, 240 ],
    khaki: [ 240, 230, 140 ],
    lavender: [ 230, 230, 250 ],
    lavenderblush: [ 255, 240, 245 ],
    lawngreen: [ 124, 252, 0 ],
    lemonchiffon: [ 255, 250, 205 ],
    lightblue: [ 173, 216, 230 ],
    lightcoral: [ 240, 128, 128 ],
    lightcyan: [ 224, 255, 255 ],
    lightgoldenrodyellow: [ 250, 250, 210 ],
    lightgray: [ 211, 211, 211 ],
    lightgreen: [ 144, 238, 144 ],
    lightgrey: [ 211, 211, 211 ],
    lightpink: [ 255, 182, 193 ],
    lightsalmon: [ 255, 160, 122 ],
    lightseagreen: [ 32, 178, 170 ],
    lightskyblue: [ 135, 206, 250 ],
    lightslategray: [ 119, 136, 153 ],
    lightslategrey: [ 119, 136, 153 ],
    lightsteelblue: [ 176, 196, 222 ],
    lightyellow: [ 255, 255, 224 ],
    lime: [ 0, 255, 0 ],
    limegreen: [ 50, 205, 50 ],
    linen: [ 250, 240, 230 ],
    magenta: [ 255, 0, 255 ],
    maroon: [ 128, 0, 0 ],
    mediumaquamarine: [ 102, 205, 170 ],
    mediumblue: [ 0, 0, 205 ],
    mediumorchid: [ 186, 85, 211 ],
    mediumpurple: [ 147, 112, 219 ],
    mediumseagreen: [ 60, 179, 113 ],
    mediumslateblue: [ 123, 104, 238 ],
    mediumspringgreen: [ 0, 250, 154 ],
    mediumturquoise: [ 72, 209, 204 ],
    mediumvioletred: [ 199, 21, 133 ],
    midnightblue: [ 25, 25, 112 ],
    mintcream: [ 245, 255, 250 ],
    mistyrose: [ 255, 228, 225 ],
    moccasin: [ 255, 228, 181 ],
    navajowhite: [ 255, 222, 173 ],
    navy: [ 0, 0, 128 ],
    oldlace: [ 253, 245, 230 ],
    olive: [ 128, 128, 0 ],
    olivedrab: [ 107, 142, 35 ],
    orange: [ 255, 165, 0 ],
    orangered: [ 255, 69, 0 ],
    orchid: [ 218, 112, 214 ],
    palegoldenrod: [ 238, 232, 170 ],
    palegreen: [ 152, 251, 152 ],
    paleturquoise: [ 175, 238, 238 ],
    palevioletred: [ 219, 112, 147 ],
    papayawhip: [ 255, 239, 213 ],
    peachpuff: [ 255, 218, 185 ],
    peru: [ 205, 133, 63 ],
    pink: [ 255, 192, 203 ],
    plum: [ 221, 160, 221 ],
    powderblue: [ 176, 224, 230 ],
    purple: [ 128, 0, 128 ],
    rebeccapurple: [ 102, 51, 153 ],
    red: [ 255, 0, 0 ],
    rosybrown: [ 188, 143, 143 ],
    royalblue: [ 65, 105, 225 ],
    saddlebrown: [ 139, 69, 19 ],
    salmon: [ 250, 128, 114 ],
    sandybrown: [ 244, 164, 96 ],
    seagreen: [ 46, 139, 87 ],
    seashell: [ 255, 245, 238 ],
    sienna: [ 160, 82, 45 ],
    silver: [ 192, 192, 192 ],
    skyblue: [ 135, 206, 235 ],
    slateblue: [ 106, 90, 205 ],
    slategray: [ 112, 128, 144 ],
    slategrey: [ 112, 128, 144 ],
    snow: [ 255, 250, 250 ],
    springgreen: [ 0, 255, 127 ],
    steelblue: [ 70, 130, 180 ],
    tan: [ 210, 180, 140 ],
    teal: [ 0, 128, 128 ],
    thistle: [ 216, 191, 216 ],
    tomato: [ 255, 99, 71 ],
    turquoise: [ 64, 224, 208 ],
    violet: [ 238, 130, 238 ],
    wheat: [ 245, 222, 179 ],
    white: [ 255, 255, 255 ],
    whitesmoke: [ 245, 245, 245 ],
    yellow: [ 255, 255, 0 ],
    yellowgreen: [ 154, 205, 50 ]
  };
  var l, f;
  f = function(t) {
    return !(!t || "string" == typeof t) && (t instanceof Array || Array.isArray(t) || t.length >= 0 && (t.splice instanceof Function || Object.getOwnPropertyDescriptor(t, t.length - 1) && "String" !== t.constructor.name));
  };
  var h = Array.prototype.concat, g = Array.prototype.slice, p = l = function(t) {
    for (var n = [], e = 0, r = t.length; e < r; e++) {
      var a = t[e];
      f(a) ? n = h.call(n, g.call(a)) : n.push(a);
    }
    return n;
  };
  p.wrap = function(t) {
    return function() {
      return t(p(arguments));
    };
  };
  var d = Object.hasOwnProperty, m = Object.create(null);
  for (var v in u) d.call(u, v) && (m[u[v]] = v);
  var y = c = {
    to: {},
    get: {}
  };
  function b(t, n, e) {
    return Math.min(Math.max(n, t), e);
  }
  function w(t) {
    var n = Math.round(t).toString(16).toUpperCase();
    return n.length < 2 ? "0" + n : n;
  }
  y.get = function(t) {
    var n, e;
    switch (t.substring(0, 3).toLowerCase()) {
     case "hsl":
      n = y.get.hsl(t), e = "hsl";
      break;

     case "hwb":
      n = y.get.hwb(t), e = "hwb";
      break;

     default:
      n = y.get.rgb(t), e = "rgb";
    }
    return n ? {
      model: e,
      value: n
    } : null;
  }, y.get.rgb = function(t) {
    if (!t) return null;
    var n, e, r, a = [ 0, 0, 0, 1 ];
    if (n = t.match(/^#([a-f0-9]{6})([a-f0-9]{2})?$/i)) {
      for (r = n[2], n = n[1], e = 0; e < 3; e++) {
        var i = 2 * e;
        a[e] = parseInt(n.slice(i, i + 2), 16);
      }
      r && (a[3] = parseInt(r, 16) / 255);
    } else if (n = t.match(/^#([a-f0-9]{3,4})$/i)) {
      for (r = (n = n[1])[3], e = 0; e < 3; e++) a[e] = parseInt(n[e] + n[e], 16);
      r && (a[3] = parseInt(r + r, 16) / 255);
    } else if (n = t.match(/^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/)) {
      for (e = 0; e < 3; e++) a[e] = parseInt(n[e + 1], 0);
      n[4] && (n[5] ? a[3] = .01 * parseFloat(n[4]) : a[3] = parseFloat(n[4]));
    } else {
      if (!(n = t.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/))) return (n = t.match(/^(\w+)$/)) ? "transparent" === n[1] ? [ 0, 0, 0, 0 ] : d.call(u, n[1]) ? ((a = u[n[1]])[3] = 1, 
      a) : null : null;
      for (e = 0; e < 3; e++) a[e] = Math.round(2.55 * parseFloat(n[e + 1]));
      n[4] && (n[5] ? a[3] = .01 * parseFloat(n[4]) : a[3] = parseFloat(n[4]));
    }
    for (e = 0; e < 3; e++) a[e] = b(a[e], 0, 255);
    return a[3] = b(a[3], 0, 1), a;
  }, y.get.hsl = function(t) {
    if (!t) return null;
    var n = t.match(/^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/);
    if (n) {
      var e = parseFloat(n[4]);
      return [ (parseFloat(n[1]) % 360 + 360) % 360, b(parseFloat(n[2]), 0, 100), b(parseFloat(n[3]), 0, 100), b(isNaN(e) ? 1 : e, 0, 1) ];
    }
    return null;
  }, y.get.hwb = function(t) {
    if (!t) return null;
    var n = t.match(/^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/);
    if (n) {
      var e = parseFloat(n[4]);
      return [ (parseFloat(n[1]) % 360 + 360) % 360, b(parseFloat(n[2]), 0, 100), b(parseFloat(n[3]), 0, 100), b(isNaN(e) ? 1 : e, 0, 1) ];
    }
    return null;
  }, y.to.hex = function() {
    var t = l(arguments);
    return "#" + w(t[0]) + w(t[1]) + w(t[2]) + (t[3] < 1 ? w(Math.round(255 * t[3])) : "");
  }, y.to.rgb = function() {
    var t = l(arguments);
    return t.length < 4 || 1 === t[3] ? "rgb(" + Math.round(t[0]) + ", " + Math.round(t[1]) + ", " + Math.round(t[2]) + ")" : "rgba(" + Math.round(t[0]) + ", " + Math.round(t[1]) + ", " + Math.round(t[2]) + ", " + t[3] + ")";
  }, y.to.rgb.percent = function() {
    var t = l(arguments), n = Math.round(t[0] / 255 * 100), e = Math.round(t[1] / 255 * 100), r = Math.round(t[2] / 255 * 100);
    return t.length < 4 || 1 === t[3] ? "rgb(" + n + "%, " + e + "%, " + r + "%)" : "rgba(" + n + "%, " + e + "%, " + r + "%, " + t[3] + ")";
  }, y.to.hsl = function() {
    var t = l(arguments);
    return t.length < 4 || 1 === t[3] ? "hsl(" + t[0] + ", " + t[1] + "%, " + t[2] + "%)" : "hsla(" + t[0] + ", " + t[1] + "%, " + t[2] + "%, " + t[3] + ")";
  }, y.to.hwb = function() {
    var t = l(arguments), n = "";
    return t.length >= 4 && 1 !== t[3] && (n = ", " + t[3]), "hwb(" + t[0] + ", " + t[1] + "%, " + t[2] + "%" + n + ")";
  }, y.to.keyword = function(t) {
    return m[t.slice(0, 3)];
  };
  var _, x = {};
  const A = {};
  for (const t of Object.keys(u)) A[u[t]] = t;
  const k = {
    rgb: {
      channels: 3,
      labels: "rgb"
    },
    hsl: {
      channels: 3,
      labels: "hsl"
    },
    hsv: {
      channels: 3,
      labels: "hsv"
    },
    hwb: {
      channels: 3,
      labels: "hwb"
    },
    cmyk: {
      channels: 4,
      labels: "cmyk"
    },
    xyz: {
      channels: 3,
      labels: "xyz"
    },
    lab: {
      channels: 3,
      labels: "lab"
    },
    lch: {
      channels: 3,
      labels: "lch"
    },
    hex: {
      channels: 1,
      labels: [ "hex" ]
    },
    keyword: {
      channels: 1,
      labels: [ "keyword" ]
    },
    ansi16: {
      channels: 1,
      labels: [ "ansi16" ]
    },
    ansi256: {
      channels: 1,
      labels: [ "ansi256" ]
    },
    hcg: {
      channels: 3,
      labels: [ "h", "c", "g" ]
    },
    apple: {
      channels: 3,
      labels: [ "r16", "g16", "b16" ]
    },
    gray: {
      channels: 1,
      labels: [ "gray" ]
    }
  };
  _ = k;
  for (const t of Object.keys(k)) {
    if (!("channels" in k[t])) throw new Error("missing channels property: " + t);
    if (!("labels" in k[t])) throw new Error("missing channel labels property: " + t);
    if (k[t].labels.length !== k[t].channels) throw new Error("channel and label counts mismatch: " + t);
    const {channels: n, labels: e} = k[t];
    delete k[t].channels, delete k[t].labels, Object.defineProperty(k[t], "channels", {
      value: n
    }), Object.defineProperty(k[t], "labels", {
      value: e
    });
  }
  k.rgb.hsl = function(t) {
    const n = t[0] / 255, e = t[1] / 255, r = t[2] / 255, a = Math.min(n, e, r), i = Math.max(n, e, r), o = i - a;
    let u, s;
    i === a ? u = 0 : n === i ? u = (e - r) / o : e === i ? u = 2 + (r - n) / o : r === i && (u = 4 + (n - e) / o), 
    u = Math.min(60 * u, 360), u < 0 && (u += 360);
    const c = (a + i) / 2;
    return s = i === a ? 0 : c <= .5 ? o / (i + a) : o / (2 - i - a), [ u, 100 * s, 100 * c ];
  }, k.rgb.hsv = function(t) {
    let n, e, r, a, i;
    const o = t[0] / 255, u = t[1] / 255, s = t[2] / 255, c = Math.max(o, u, s), l = c - Math.min(o, u, s), f = function(t) {
      return (c - t) / 6 / l + .5;
    };
    return 0 === l ? (a = 0, i = 0) : (i = l / c, n = f(o), e = f(u), r = f(s), o === c ? a = r - e : u === c ? a = 1 / 3 + n - r : s === c && (a = 2 / 3 + e - n), 
    a < 0 ? a += 1 : a > 1 && (a -= 1)), [ 360 * a, 100 * i, 100 * c ];
  }, k.rgb.hwb = function(t) {
    const n = t[0], e = t[1];
    let r = t[2];
    const a = k.rgb.hsl(t)[0], i = 1 / 255 * Math.min(n, Math.min(e, r));
    return r = 1 - 1 / 255 * Math.max(n, Math.max(e, r)), [ a, 100 * i, 100 * r ];
  }, k.rgb.cmyk = function(t) {
    const n = t[0] / 255, e = t[1] / 255, r = t[2] / 255, a = Math.min(1 - n, 1 - e, 1 - r);
    return [ 100 * ((1 - n - a) / (1 - a) || 0), 100 * ((1 - e - a) / (1 - a) || 0), 100 * ((1 - r - a) / (1 - a) || 0), 100 * a ];
  }, k.rgb.keyword = function(t) {
    const n = A[t];
    if (n) return n;
    let e, r = 1 / 0;
    for (const n of Object.keys(u)) {
      const o = (i = u[n], ((a = t)[0] - i[0]) ** 2 + (a[1] - i[1]) ** 2 + (a[2] - i[2]) ** 2);
      o < r && (r = o, e = n);
    }
    var a, i;
    return e;
  }, k.keyword.rgb = function(t) {
    return u[t];
  }, k.rgb.xyz = function(t) {
    let n = t[0] / 255, e = t[1] / 255, r = t[2] / 255;
    n = n > .04045 ? ((n + .055) / 1.055) ** 2.4 : n / 12.92, e = e > .04045 ? ((e + .055) / 1.055) ** 2.4 : e / 12.92, 
    r = r > .04045 ? ((r + .055) / 1.055) ** 2.4 : r / 12.92;
    return [ 100 * (.4124 * n + .3576 * e + .1805 * r), 100 * (.2126 * n + .7152 * e + .0722 * r), 100 * (.0193 * n + .1192 * e + .9505 * r) ];
  }, k.rgb.lab = function(t) {
    const n = k.rgb.xyz(t);
    let e = n[0], r = n[1], a = n[2];
    e /= 95.047, r /= 100, a /= 108.883, e = e > .008856 ? e ** (1 / 3) : 7.787 * e + 16 / 116, 
    r = r > .008856 ? r ** (1 / 3) : 7.787 * r + 16 / 116, a = a > .008856 ? a ** (1 / 3) : 7.787 * a + 16 / 116;
    return [ 116 * r - 16, 500 * (e - r), 200 * (r - a) ];
  }, k.hsl.rgb = function(t) {
    const n = t[0] / 360, e = t[1] / 100, r = t[2] / 100;
    let a, i, o;
    if (0 === e) return o = 255 * r, [ o, o, o ];
    a = r < .5 ? r * (1 + e) : r + e - r * e;
    const u = 2 * r - a, s = [ 0, 0, 0 ];
    for (let t = 0; t < 3; t++) i = n + 1 / 3 * -(t - 1), i < 0 && i++, i > 1 && i--, 
    o = 6 * i < 1 ? u + 6 * (a - u) * i : 2 * i < 1 ? a : 3 * i < 2 ? u + (a - u) * (2 / 3 - i) * 6 : u, 
    s[t] = 255 * o;
    return s;
  }, k.hsl.hsv = function(t) {
    const n = t[0];
    let e = t[1] / 100, r = t[2] / 100, a = e;
    const i = Math.max(r, .01);
    r *= 2, e *= r <= 1 ? r : 2 - r, a *= i <= 1 ? i : 2 - i;
    return [ n, 100 * (0 === r ? 2 * a / (i + a) : 2 * e / (r + e)), 100 * ((r + e) / 2) ];
  }, k.hsv.rgb = function(t) {
    const n = t[0] / 60, e = t[1] / 100;
    let r = t[2] / 100;
    const a = Math.floor(n) % 6, i = n - Math.floor(n), o = 255 * r * (1 - e), u = 255 * r * (1 - e * i), s = 255 * r * (1 - e * (1 - i));
    switch (r *= 255, a) {
     case 0:
      return [ r, s, o ];

     case 1:
      return [ u, r, o ];

     case 2:
      return [ o, r, s ];

     case 3:
      return [ o, u, r ];

     case 4:
      return [ s, o, r ];

     case 5:
      return [ r, o, u ];
    }
  }, k.hsv.hsl = function(t) {
    const n = t[0], e = t[1] / 100, r = t[2] / 100, a = Math.max(r, .01);
    let i, o;
    o = (2 - e) * r;
    const u = (2 - e) * a;
    return i = e * a, i /= u <= 1 ? u : 2 - u, i = i || 0, o /= 2, [ n, 100 * i, 100 * o ];
  }, k.hwb.rgb = function(t) {
    const n = t[0] / 360;
    let e = t[1] / 100, r = t[2] / 100;
    const a = e + r;
    let i;
    a > 1 && (e /= a, r /= a);
    const o = Math.floor(6 * n), u = 1 - r;
    i = 6 * n - o, 0 != (1 & o) && (i = 1 - i);
    const s = e + i * (u - e);
    let c, l, f;
    switch (o) {
     default:
     case 6:
     case 0:
      c = u, l = s, f = e;
      break;

     case 1:
      c = s, l = u, f = e;
      break;

     case 2:
      c = e, l = u, f = s;
      break;

     case 3:
      c = e, l = s, f = u;
      break;

     case 4:
      c = s, l = e, f = u;
      break;

     case 5:
      c = u, l = e, f = s;
    }
    return [ 255 * c, 255 * l, 255 * f ];
  }, k.cmyk.rgb = function(t) {
    const n = t[0] / 100, e = t[1] / 100, r = t[2] / 100, a = t[3] / 100;
    return [ 255 * (1 - Math.min(1, n * (1 - a) + a)), 255 * (1 - Math.min(1, e * (1 - a) + a)), 255 * (1 - Math.min(1, r * (1 - a) + a)) ];
  }, k.xyz.rgb = function(t) {
    const n = t[0] / 100, e = t[1] / 100, r = t[2] / 100;
    let a, i, o;
    return a = 3.2406 * n + -1.5372 * e + -.4986 * r, i = -.9689 * n + 1.8758 * e + .0415 * r, 
    o = .0557 * n + -.204 * e + 1.057 * r, a = a > .0031308 ? 1.055 * a ** (1 / 2.4) - .055 : 12.92 * a, 
    i = i > .0031308 ? 1.055 * i ** (1 / 2.4) - .055 : 12.92 * i, o = o > .0031308 ? 1.055 * o ** (1 / 2.4) - .055 : 12.92 * o, 
    a = Math.min(Math.max(0, a), 1), i = Math.min(Math.max(0, i), 1), o = Math.min(Math.max(0, o), 1), 
    [ 255 * a, 255 * i, 255 * o ];
  }, k.xyz.lab = function(t) {
    let n = t[0], e = t[1], r = t[2];
    n /= 95.047, e /= 100, r /= 108.883, n = n > .008856 ? n ** (1 / 3) : 7.787 * n + 16 / 116, 
    e = e > .008856 ? e ** (1 / 3) : 7.787 * e + 16 / 116, r = r > .008856 ? r ** (1 / 3) : 7.787 * r + 16 / 116;
    return [ 116 * e - 16, 500 * (n - e), 200 * (e - r) ];
  }, k.lab.xyz = function(t) {
    let n, e, r;
    e = (t[0] + 16) / 116, n = t[1] / 500 + e, r = e - t[2] / 200;
    const a = e ** 3, i = n ** 3, o = r ** 3;
    return e = a > .008856 ? a : (e - 16 / 116) / 7.787, n = i > .008856 ? i : (n - 16 / 116) / 7.787, 
    r = o > .008856 ? o : (r - 16 / 116) / 7.787, n *= 95.047, e *= 100, r *= 108.883, 
    [ n, e, r ];
  }, k.lab.lch = function(t) {
    const n = t[0], e = t[1], r = t[2];
    let a;
    a = 360 * Math.atan2(r, e) / 2 / Math.PI, a < 0 && (a += 360);
    return [ n, Math.sqrt(e * e + r * r), a ];
  }, k.lch.lab = function(t) {
    const n = t[0], e = t[1], r = t[2] / 360 * 2 * Math.PI;
    return [ n, e * Math.cos(r), e * Math.sin(r) ];
  }, k.rgb.ansi16 = function(t, n = null) {
    const [e, r, a] = t;
    let i = null === n ? k.rgb.hsv(t)[2] : n;
    if (i = Math.round(i / 50), 0 === i) return 30;
    let o = 30 + (Math.round(a / 255) << 2 | Math.round(r / 255) << 1 | Math.round(e / 255));
    return 2 === i && (o += 60), o;
  }, k.hsv.ansi16 = function(t) {
    return k.rgb.ansi16(k.hsv.rgb(t), t[2]);
  }, k.rgb.ansi256 = function(t) {
    const n = t[0], e = t[1], r = t[2];
    if (n === e && e === r) return n < 8 ? 16 : n > 248 ? 231 : Math.round((n - 8) / 247 * 24) + 232;
    return 16 + 36 * Math.round(n / 255 * 5) + 6 * Math.round(e / 255 * 5) + Math.round(r / 255 * 5);
  }, k.ansi16.rgb = function(t) {
    let n = t % 10;
    if (0 === n || 7 === n) return t > 50 && (n += 3.5), n = n / 10.5 * 255, [ n, n, n ];
    const e = .5 * (1 + ~~(t > 50));
    return [ (1 & n) * e * 255, (n >> 1 & 1) * e * 255, (n >> 2 & 1) * e * 255 ];
  }, k.ansi256.rgb = function(t) {
    if (t >= 232) {
      const n = 10 * (t - 232) + 8;
      return [ n, n, n ];
    }
    let n;
    t -= 16;
    return [ Math.floor(t / 36) / 5 * 255, Math.floor((n = t % 36) / 6) / 5 * 255, n % 6 / 5 * 255 ];
  }, k.rgb.hex = function(t) {
    const n = (((255 & Math.round(t[0])) << 16) + ((255 & Math.round(t[1])) << 8) + (255 & Math.round(t[2]))).toString(16).toUpperCase();
    return "000000".substring(n.length) + n;
  }, k.hex.rgb = function(t) {
    const n = t.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!n) return [ 0, 0, 0 ];
    let e = n[0];
    3 === n[0].length && (e = e.split("").map((t => t + t)).join(""));
    const r = parseInt(e, 16);
    return [ r >> 16 & 255, r >> 8 & 255, 255 & r ];
  }, k.rgb.hcg = function(t) {
    const n = t[0] / 255, e = t[1] / 255, r = t[2] / 255, a = Math.max(Math.max(n, e), r), i = Math.min(Math.min(n, e), r), o = a - i;
    let u, s;
    return u = o < 1 ? i / (1 - o) : 0, s = o <= 0 ? 0 : a === n ? (e - r) / o % 6 : a === e ? 2 + (r - n) / o : 4 + (n - e) / o, 
    s /= 6, s %= 1, [ 360 * s, 100 * o, 100 * u ];
  }, k.hsl.hcg = function(t) {
    const n = t[1] / 100, e = t[2] / 100, r = e < .5 ? 2 * n * e : 2 * n * (1 - e);
    let a = 0;
    return r < 1 && (a = (e - .5 * r) / (1 - r)), [ t[0], 100 * r, 100 * a ];
  }, k.hsv.hcg = function(t) {
    const n = t[1] / 100, e = t[2] / 100, r = n * e;
    let a = 0;
    return r < 1 && (a = (e - r) / (1 - r)), [ t[0], 100 * r, 100 * a ];
  }, k.hcg.rgb = function(t) {
    const n = t[0] / 360, e = t[1] / 100, r = t[2] / 100;
    if (0 === e) return [ 255 * r, 255 * r, 255 * r ];
    const a = [ 0, 0, 0 ], i = n % 1 * 6, o = i % 1, u = 1 - o;
    let s = 0;
    switch (Math.floor(i)) {
     case 0:
      a[0] = 1, a[1] = o, a[2] = 0;
      break;

     case 1:
      a[0] = u, a[1] = 1, a[2] = 0;
      break;

     case 2:
      a[0] = 0, a[1] = 1, a[2] = o;
      break;

     case 3:
      a[0] = 0, a[1] = u, a[2] = 1;
      break;

     case 4:
      a[0] = o, a[1] = 0, a[2] = 1;
      break;

     default:
      a[0] = 1, a[1] = 0, a[2] = u;
    }
    return s = (1 - e) * r, [ 255 * (e * a[0] + s), 255 * (e * a[1] + s), 255 * (e * a[2] + s) ];
  }, k.hcg.hsv = function(t) {
    const n = t[1] / 100, e = n + t[2] / 100 * (1 - n);
    let r = 0;
    return e > 0 && (r = n / e), [ t[0], 100 * r, 100 * e ];
  }, k.hcg.hsl = function(t) {
    const n = t[1] / 100, e = t[2] / 100 * (1 - n) + .5 * n;
    let r = 0;
    return e > 0 && e < .5 ? r = n / (2 * e) : e >= .5 && e < 1 && (r = n / (2 * (1 - e))), 
    [ t[0], 100 * r, 100 * e ];
  }, k.hcg.hwb = function(t) {
    const n = t[1] / 100, e = n + t[2] / 100 * (1 - n);
    return [ t[0], 100 * (e - n), 100 * (1 - e) ];
  }, k.hwb.hcg = function(t) {
    const n = t[1] / 100, e = 1 - t[2] / 100, r = e - n;
    let a = 0;
    return r < 1 && (a = (e - r) / (1 - r)), [ t[0], 100 * r, 100 * a ];
  }, k.apple.rgb = function(t) {
    return [ t[0] / 65535 * 255, t[1] / 65535 * 255, t[2] / 65535 * 255 ];
  }, k.rgb.apple = function(t) {
    return [ t[0] / 255 * 65535, t[1] / 255 * 65535, t[2] / 255 * 65535 ];
  }, k.gray.rgb = function(t) {
    return [ t[0] / 100 * 255, t[0] / 100 * 255, t[0] / 100 * 255 ];
  }, k.gray.hsl = function(t) {
    return [ 0, 0, t[0] ];
  }, k.gray.hsv = k.gray.hsl, k.gray.hwb = function(t) {
    return [ 0, 100, t[0] ];
  }, k.gray.cmyk = function(t) {
    return [ 0, 0, 0, t[0] ];
  }, k.gray.lab = function(t) {
    return [ t[0], 0, 0 ];
  }, k.gray.hex = function(t) {
    const n = 255 & Math.round(t[0] / 100 * 255), e = ((n << 16) + (n << 8) + n).toString(16).toUpperCase();
    return "000000".substring(e.length) + e;
  }, k.rgb.gray = function(t) {
    return [ (t[0] + t[1] + t[2]) / 3 / 255 * 100 ];
  };
  var j;
  function T(t) {
    const n = function() {
      const t = {}, n = Object.keys(_);
      for (let e = n.length, r = 0; r < e; r++) t[n[r]] = {
        distance: -1,
        parent: null
      };
      return t;
    }(), e = [ t ];
    for (n[t].distance = 0; e.length; ) {
      const t = e.pop(), r = Object.keys(_[t]);
      for (let a = r.length, i = 0; i < a; i++) {
        const a = r[i], o = n[a];
        -1 === o.distance && (o.distance = n[t].distance + 1, o.parent = t, e.unshift(a));
      }
    }
    return n;
  }
  function M(t, n) {
    return function(e) {
      return n(t(e));
    };
  }
  function C(t, n) {
    const e = [ n[t].parent, t ];
    let r = _[n[t].parent][t], a = n[t].parent;
    for (;n[a].parent; ) e.unshift(n[a].parent), r = M(_[n[a].parent][a], r), a = n[a].parent;
    return r.conversion = e, r;
  }
  j = function(t) {
    const n = T(t), e = {}, r = Object.keys(n);
    for (let t = r.length, a = 0; a < t; a++) {
      const t = r[a];
      null !== n[t].parent && (e[t] = C(t, n));
    }
    return e;
  };
  const I = {};
  Object.keys(_).forEach((t => {
    I[t] = {}, Object.defineProperty(I[t], "channels", {
      value: _[t].channels
    }), Object.defineProperty(I[t], "labels", {
      value: _[t].labels
    });
    const n = j(t);
    Object.keys(n).forEach((e => {
      const r = n[e];
      I[t][e] = function(t) {
        const n = function(...n) {
          const e = n[0];
          if (null == e) return e;
          e.length > 1 && (n = e);
          const r = t(n);
          if ("object" == typeof r) for (let t = r.length, n = 0; n < t; n++) r[n] = Math.round(r[n]);
          return r;
        };
        return "conversion" in t && (n.conversion = t.conversion), n;
      }(r), I[t][e].raw = function(t) {
        const n = function(...n) {
          const e = n[0];
          return null == e ? e : (e.length > 1 && (n = e), t(n));
        };
        return "conversion" in t && (n.conversion = t.conversion), n;
      }(r);
    }));
  })), x = I;
  const E = [ "keyword", "gray", "hex" ], S = {};
  for (const t of Object.keys(x)) S[[ ...x[t].labels ].sort().join("")] = t;
  const z = {};
  function O(t, n) {
    if (!(this instanceof O)) return new O(t, n);
    if (n && n in E && (n = null), n && !(n in x)) throw new Error("Unknown model: " + n);
    let e, r;
    if (null == t) this.model = "rgb", this.color = [ 0, 0, 0 ], this.valpha = 1; else if (t instanceof O) this.model = t.model, 
    this.color = [ ...t.color ], this.valpha = t.valpha; else if ("string" == typeof t) {
      const n = c.get(t);
      if (null === n) throw new Error("Unable to parse color from string: " + t);
      this.model = n.model, r = x[this.model].channels, this.color = n.value.slice(0, r), 
      this.valpha = "number" == typeof n.value[r] ? n.value[r] : 1;
    } else if (t.length > 0) {
      this.model = n || "rgb", r = x[this.model].channels;
      const e = Array.prototype.slice.call(t, 0, r);
      this.color = P(e, r), this.valpha = "number" == typeof t[r] ? t[r] : 1;
    } else if ("number" == typeof t) this.model = "rgb", this.color = [ t >> 16 & 255, t >> 8 & 255, 255 & t ], 
    this.valpha = 1; else {
      this.valpha = 1;
      const n = Object.keys(t);
      "alpha" in t && (n.splice(n.indexOf("alpha"), 1), this.valpha = "number" == typeof t.alpha ? t.alpha : 0);
      const r = n.sort().join("");
      if (!(r in S)) throw new Error("Unable to parse color from object: " + JSON.stringify(t));
      this.model = S[r];
      const {labels: a} = x[this.model], i = [];
      for (e = 0; e < a.length; e++) i.push(t[a[e]]);
      this.color = P(i);
    }
    if (z[this.model]) for (r = x[this.model].channels, e = 0; e < r; e++) {
      const t = z[this.model][e];
      t && (this.color[e] = t(this.color[e]));
    }
    this.valpha = Math.max(0, Math.min(1, this.valpha)), Object.freeze && Object.freeze(this);
  }
  O.prototype = {
    toString() {
      return this.string();
    },
    toJSON() {
      return this[this.model]();
    },
    string(t) {
      let n = this.model in c.to ? this : this.rgb();
      n = n.round("number" == typeof t ? t : 1);
      const e = 1 === n.valpha ? n.color : [ ...n.color, this.valpha ];
      return c.to[n.model](e);
    },
    percentString(t) {
      const n = this.rgb().round("number" == typeof t ? t : 1), e = 1 === n.valpha ? n.color : [ ...n.color, this.valpha ];
      return c.to.rgb.percent(e);
    },
    array() {
      return 1 === this.valpha ? [ ...this.color ] : [ ...this.color, this.valpha ];
    },
    object() {
      const t = {}, {channels: n} = x[this.model], {labels: e} = x[this.model];
      for (let r = 0; r < n; r++) t[e[r]] = this.color[r];
      return 1 !== this.valpha && (t.alpha = this.valpha), t;
    },
    unitArray() {
      const t = this.rgb().color;
      return t[0] /= 255, t[1] /= 255, t[2] /= 255, 1 !== this.valpha && t.push(this.valpha), 
      t;
    },
    unitObject() {
      const t = this.rgb().object();
      return t.r /= 255, t.g /= 255, t.b /= 255, 1 !== this.valpha && (t.alpha = this.valpha), 
      t;
    },
    round(t) {
      return t = Math.max(t || 0, 0), new O([ ...this.color.map(R(t)), this.valpha ], this.model);
    },
    alpha(t) {
      return void 0 !== t ? new O([ ...this.color, Math.max(0, Math.min(1, t)) ], this.model) : this.valpha;
    },
    red: q("rgb", 0, L(255)),
    green: q("rgb", 1, L(255)),
    blue: q("rgb", 2, L(255)),
    hue: q([ "hsl", "hsv", "hsl", "hwb", "hcg" ], 0, (t => (t % 360 + 360) % 360)),
    saturationl: q("hsl", 1, L(100)),
    lightness: q("hsl", 2, L(100)),
    saturationv: q("hsv", 1, L(100)),
    value: q("hsv", 2, L(100)),
    chroma: q("hcg", 1, L(100)),
    gray: q("hcg", 2, L(100)),
    white: q("hwb", 1, L(100)),
    wblack: q("hwb", 2, L(100)),
    cyan: q("cmyk", 0, L(100)),
    magenta: q("cmyk", 1, L(100)),
    yellow: q("cmyk", 2, L(100)),
    black: q("cmyk", 3, L(100)),
    x: q("xyz", 0, L(95.047)),
    y: q("xyz", 1, L(100)),
    z: q("xyz", 2, L(108.833)),
    l: q("lab", 0, L(100)),
    a: q("lab", 1),
    b: q("lab", 2),
    keyword(t) {
      return void 0 !== t ? new O(t) : x[this.model].keyword(this.color);
    },
    hex(t) {
      return void 0 !== t ? new O(t) : c.to.hex(this.rgb().round().color);
    },
    hexa(t) {
      if (void 0 !== t) return new O(t);
      const n = this.rgb().round().color;
      let e = Math.round(255 * this.valpha).toString(16).toUpperCase();
      return 1 === e.length && (e = "0" + e), c.to.hex(n) + e;
    },
    rgbNumber() {
      const t = this.rgb().color;
      return (255 & t[0]) << 16 | (255 & t[1]) << 8 | 255 & t[2];
    },
    luminosity() {
      const t = this.rgb().color, n = [];
      for (const [e, r] of t.entries()) {
        const t = r / 255;
        n[e] = t <= .04045 ? t / 12.92 : ((t + .055) / 1.055) ** 2.4;
      }
      return .2126 * n[0] + .7152 * n[1] + .0722 * n[2];
    },
    contrast(t) {
      const n = this.luminosity(), e = t.luminosity();
      return n > e ? (n + .05) / (e + .05) : (e + .05) / (n + .05);
    },
    level(t) {
      const n = this.contrast(t);
      return n >= 7 ? "AAA" : n >= 4.5 ? "AA" : "";
    },
    isDark() {
      const t = this.rgb().color;
      return (2126 * t[0] + 7152 * t[1] + 722 * t[2]) / 1e4 < 128;
    },
    isLight() {
      return !this.isDark();
    },
    negate() {
      const t = this.rgb();
      for (let n = 0; n < 3; n++) t.color[n] = 255 - t.color[n];
      return t;
    },
    lighten(t) {
      const n = this.hsl();
      return n.color[2] += n.color[2] * t, n;
    },
    darken(t) {
      const n = this.hsl();
      return n.color[2] -= n.color[2] * t, n;
    },
    saturate(t) {
      const n = this.hsl();
      return n.color[1] += n.color[1] * t, n;
    },
    desaturate(t) {
      const n = this.hsl();
      return n.color[1] -= n.color[1] * t, n;
    },
    whiten(t) {
      const n = this.hwb();
      return n.color[1] += n.color[1] * t, n;
    },
    blacken(t) {
      const n = this.hwb();
      return n.color[2] += n.color[2] * t, n;
    },
    grayscale() {
      const t = this.rgb().color, n = .3 * t[0] + .59 * t[1] + .11 * t[2];
      return O.rgb(n, n, n);
    },
    fade(t) {
      return this.alpha(this.valpha - this.valpha * t);
    },
    opaquer(t) {
      return this.alpha(this.valpha + this.valpha * t);
    },
    rotate(t) {
      const n = this.hsl();
      let e = n.color[0];
      return e = (e + t) % 360, e = e < 0 ? 360 + e : e, n.color[0] = e, n;
    },
    mix(t, n) {
      if (!t || !t.rgb) throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof t);
      const e = t.rgb(), r = this.rgb(), a = void 0 === n ? .5 : n, i = 2 * a - 1, o = e.alpha() - r.alpha(), u = ((i * o == -1 ? i : (i + o) / (1 + i * o)) + 1) / 2, s = 1 - u;
      return O.rgb(u * e.red() + s * r.red(), u * e.green() + s * r.green(), u * e.blue() + s * r.blue(), e.alpha() * a + r.alpha() * (1 - a));
    }
  };
  for (const t of Object.keys(x)) {
    if (E.includes(t)) continue;
    const {channels: n} = x[t];
    O.prototype[t] = function(...n) {
      return this.model === t ? new O(this) : n.length > 0 ? new O(n, t) : new O([ ...(e = x[this.model][t].raw(this.color), 
      Array.isArray(e) ? e : [ e ]), this.valpha ], t);
      var e;
    }, O[t] = function(...e) {
      let r = e[0];
      return "number" == typeof r && (r = P(e, n)), new O(r, t);
    };
  }
  function R(t) {
    return function(n) {
      return function(t, n) {
        return Number(t.toFixed(n));
      }(n, t);
    };
  }
  function q(t, n, e) {
    t = Array.isArray(t) ? t : [ t ];
    for (const r of t) (z[r] || (z[r] = []))[n] = e;
    return t = t[0], function(r) {
      let a;
      return void 0 !== r ? (e && (r = e(r)), a = this[t](), a.color[n] = r, a) : (a = this[t]().color[n], 
      e && (a = e(a)), a);
    };
  }
  function L(t) {
    return function(n) {
      return Math.max(0, Math.min(t, n));
    };
  }
  function P(t, n) {
    for (let e = 0; e < n; e++) "number" != typeof t[e] && (t[e] = 0);
    return t;
  }
  o = O;
  const N = {
    hintUppercaseLetters: !1,
    hintFontFamily: "source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace",
    hintFontSize: 10,
    hintWeight: "auto",
    hintBackgroundColor: "",
    hintBackgroundOpacity: 1,
    hintFontColor: "",
    hintBorderWidth: 1,
    hintBorderRadius: 3,
    hintMinimumContrastRatio: 4,
    scrollBehavior: "auto",
    hintsToggleGlobal: !0,
    hintsToggleHosts: new Map,
    hintsTogglePaths: new Map,
    hintsToggleTabs: new Map,
    enableNotifications: !0,
    toastPosition: "top-center",
    toastTransition: "bounce",
    toastDuration: 5e3,
    includeSingleLetterHints: !0,
    urlInTitle: !0,
    includeTabMarkers: !0,
    uppercaseTabMarkers: !0,
    keyboardClicking: !1,
    customSelectors: new Map,
    showWhatsNewPageOnUpdate: !0,
    newTabPosition: "relatedAfterCurrent",
    hasSeenSettingsPage: !1,
    directClickWithNoFocusedDocument: !1,
    directClickWhenEditing: !0
  };
  function W(t) {
    if (!t) return !0;
    try {
      new (e(o))(t);
    } catch {
      return !1;
    }
    return !0;
  }
  function B(t, n, e) {
    return t >= n && t <= e;
  }
  const F = {
    hintBackgroundColor: W,
    hintFontColor: W,
    hintFontSize: t => B(t, 6, 72),
    hintBorderRadius: t => B(t, 0, 72),
    hintBorderWidth: t => B(t, 0, 72),
    hintBackgroundOpacity: t => "" !== t && B(t, 0, 1),
    hintMinimumContrastRatio: t => B(t, 2.5, 21)
  };
  function U(t) {
    return t in N;
  }
  function $(t, n) {
    if (!U(t)) return !1;
    const e = F[t];
    return void 0 === e || e(n);
  }
  s = i("1t74G");
  const D = new Set([ "hintsToggleTabs", "tabsByRecency", "hintsStacks", "tabMarkers" ]);
  function H(t, n) {
    return n instanceof Map ? {
      dataType: "Map",
      value: Array.from(n.entries())
    } : n;
  }
  function G(t, n) {
    return "object" == typeof n && null !== n && "Map" === n.dataType && n.value ? new Map(n.value) : n;
  }
  async function K(t, n, r) {
    if (U(t) && !$(t, n)) return;
    const a = JSON.stringify(n, H);
    await (!1 === r || void 0 === r && D.has(t) ? e(s).storage.local.set({
      [t]: a
    }) : e(s).storage.sync.set({
      [t]: a
    }));
  }
  async function Z(t, n) {
    return void 0 !== (!1 === n || void 0 === n && D.has(t) ? await e(s).storage.local.get(t) : await e(s).storage.sync.get(t))[t];
  }
  async function J(t, n, e) {
    await Z(t, e) || await K(t, n, e);
  }
  async function X(t, n) {
    const r = !1 === n || void 0 === n && D.has(t) ? await e(s).storage.local.get(t) : await e(s).storage.sync.get(t), [a] = Object.values(r);
    try {
      const e = JSON.parse(a, G);
      if ("customSelectors" === t && !(e instanceof Map)) {
        const r = new Map(Object.entries(e));
        return await K(t, r, n), r;
      }
      return e;
    } catch {
      return a;
    }
  }
  var V;
  V = i("bbtrO").getBundleURL("2xXxC") + i("aCBW2").resolve("eDuZR");
  var Y;
  Y = i("bbtrO").getBundleURL("2xXxC") + i("aCBW2").resolve("ib01S");
  var Q;
  Q = i("bbtrO").getBundleURL("2xXxC") + i("aCBW2").resolve("aqImY");
  var tt;
  tt = i("bbtrO").getBundleURL("2xXxC") + i("aCBW2").resolve("3an9X");
  var nt;
  nt = i("bbtrO").getBundleURL("2xXxC") + i("aCBW2").resolve("2T6ly");
  var et;
  et = i("bbtrO").getBundleURL("2xXxC") + i("aCBW2").resolve("bzwoj");
  var rt;
  rt = i("bbtrO").getBundleURL("2xXxC") + i("aCBW2").resolve("bYGSi");
  const at = {
    icon48: new URL(V),
    icon128: new URL(Y),
    iconSvg: new URL(Q),
    iconKeyboard48: new URL(tt),
    offscreenDocument: new URL(nt),
    whatsNewPage: new URL(et),
    onboarding: new URL(rt)
  };
  s = i("1t74G"), s = i("1t74G");
  function it(t) {
    if (null == t) throw new Error("Fatal error: value must not be null/undefined.");
  }
  function ot(t) {
    return "fulfilled" === t.status;
  }
  s = i("1t74G");
  async function ut() {
    const t = (await e(s).tabs.query({
      currentWindow: !0,
      active: !0
    }))[0];
    if (!t) throw new Error("Unable to retrieve the current tab");
    return t;
  }
  async function st() {
    const t = await ut();
    if (!t.id) throw new Error("Unable to retrieve the current tab id");
    return t.id;
  }
  s = i("1t74G");
  function ct(t, n, e, r) {
    return new (e || (e = Promise))((function(a, i) {
      function o(t) {
        try {
          s(r.next(t));
        } catch (t) {
          i(t);
        }
      }
      function u(t) {
        try {
          s(r.throw(t));
        } catch (t) {
          i(t);
        }
      }
      function s(t) {
        var n;
        t.done ? a(t.value) : (n = t.value, n instanceof e ? n : new e((function(t) {
          t(n);
        }))).then(o, u);
      }
      s((r = r.apply(t, n || [])).next());
    }));
  }
  function lt(t, n) {
    var e, r, a, i, o = {
      label: 0,
      sent: function() {
        if (1 & a[0]) throw a[1];
        return a[1];
      },
      trys: [],
      ops: []
    };
    return i = {
      next: u(0),
      throw: u(1),
      return: u(2)
    }, "function" == typeof Symbol && (i[Symbol.iterator] = function() {
      return this;
    }), i;
    function u(u) {
      return function(s) {
        return function(u) {
          if (e) throw new TypeError("Generator is already executing.");
          for (;i && (i = 0, u[0] && (o = 0)), o; ) try {
            if (e = 1, r && (a = 2 & u[0] ? r.return : u[0] ? r.throw || ((a = r.return) && a.call(r), 
            0) : r.next) && !(a = a.call(r, u[1])).done) return a;
            switch (r = 0, a && (u = [ 2 & u[0], a.value ]), u[0]) {
             case 0:
             case 1:
              a = u;
              break;

             case 4:
              return o.label++, {
                value: u[1],
                done: !1
              };

             case 5:
              o.label++, r = u[1], u = [ 0 ];
              continue;

             case 7:
              u = o.ops.pop(), o.trys.pop();
              continue;

             default:
              if (!(a = o.trys, (a = a.length > 0 && a[a.length - 1]) || 6 !== u[0] && 2 !== u[0])) {
                o = 0;
                continue;
              }
              if (3 === u[0] && (!a || u[1] > a[0] && u[1] < a[3])) {
                o.label = u[1];
                break;
              }
              if (6 === u[0] && o.label < a[1]) {
                o.label = a[1], a = u;
                break;
              }
              if (a && o.label < a[2]) {
                o.label = a[2], o.ops.push(u);
                break;
              }
              a[2] && o.ops.pop(), o.trys.pop();
              continue;
            }
            u = n.call(t, o);
          } catch (t) {
            u = [ 6, t ], r = 0;
          } finally {
            e = a = 0;
          }
          if (5 & u[0]) throw u[1];
          return {
            value: u[0] ? u[1] : void 0,
            done: !0
          };
        }([ u, s ]);
      };
    }
  }
  Object.create;
  Object.create;
  new Error("timeout while waiting for mutex to become available"), new Error("mutex already locked");
  var ft = new Error("request for lock canceled"), ht = function() {
    function t(t, n) {
      if (void 0 === n && (n = ft), this._maxConcurrency = t, this._cancelError = n, this._queue = [], 
      this._waiters = [], t <= 0) throw new Error("semaphore must be initialized to a positive value");
      this._value = t;
    }
    return t.prototype.acquire = function() {
      var t = this, n = this.isLocked(), e = new Promise((function(n, e) {
        return t._queue.push({
          resolve: n,
          reject: e
        });
      }));
      return n || this._dispatch(), e;
    }, t.prototype.runExclusive = function(t) {
      return ct(this, void 0, void 0, (function() {
        var n, e, r;
        return lt(this, (function(a) {
          switch (a.label) {
           case 0:
            return [ 4, this.acquire() ];

           case 1:
            n = a.sent(), e = n[0], r = n[1], a.label = 2;

           case 2:
            return a.trys.push([ 2, , 4, 5 ]), [ 4, t(e) ];

           case 3:
            return [ 2, a.sent() ];

           case 4:
            return r(), [ 7 ];

           case 5:
            return [ 2 ];
          }
        }));
      }));
    }, t.prototype.waitForUnlock = function() {
      return ct(this, void 0, void 0, (function() {
        var t = this;
        return lt(this, (function(n) {
          return this.isLocked() ? [ 2, new Promise((function(n) {
            return t._waiters.push({
              resolve: n
            });
          })) ] : [ 2, Promise.resolve() ];
        }));
      }));
    }, t.prototype.isLocked = function() {
      return this._value <= 0;
    }, t.prototype.release = function() {
      if (this._maxConcurrency > 1) throw new Error("this method is unavailable on semaphores with concurrency > 1; use the scoped release returned by acquire instead");
      if (this._currentReleaser) {
        var t = this._currentReleaser;
        this._currentReleaser = void 0, t();
      }
    }, t.prototype.cancel = function() {
      var t = this;
      this._queue.forEach((function(n) {
        return n.reject(t._cancelError);
      })), this._queue = [];
    }, t.prototype._dispatch = function() {
      var t = this, n = this._queue.shift();
      if (n) {
        var e = !1;
        this._currentReleaser = function() {
          e || (e = !0, t._value++, t._resolveWaiters(), t._dispatch());
        }, n.resolve([ this._value--, this._currentReleaser ]);
      }
    }, t.prototype._resolveWaiters = function() {
      this._waiters.forEach((function(t) {
        return t.resolve();
      })), this._waiters = [];
    }, t;
  }(), gt = function() {
    function t(t) {
      this._semaphore = new ht(1, t);
    }
    return t.prototype.acquire = function() {
      return ct(this, void 0, void 0, (function() {
        var t;
        return lt(this, (function(n) {
          switch (n.label) {
           case 0:
            return [ 4, this._semaphore.acquire() ];

           case 1:
            return t = n.sent(), [ 2, t[1] ];
          }
        }));
      }));
    }, t.prototype.runExclusive = function(t) {
      return this._semaphore.runExclusive((function() {
        return t();
      }));
    }, t.prototype.isLocked = function() {
      return this._semaphore.isLocked();
    }, t.prototype.waitForUnlock = function() {
      return this._semaphore.waitForUnlock();
    }, t.prototype.release = function() {
      this._semaphore.release();
    }, t.prototype.cancel = function() {
      return this._semaphore.cancel();
    }, t;
  }();
  const pt = [ "zz", "zy", "zx", "zw", "zv", "zu", "zt", "zs", "zr", "zq", "zp", "zo", "zn", "zm", "zl", "zk", "zj", "zi", "zh", "zg", "zf", "ze", "zd", "zc", "zb", "za", "yz", "yy", "yx", "yw", "yv", "yu", "yt", "ys", "yr", "yq", "yp", "yo", "yn", "ym", "yl", "yk", "yj", "yi", "yh", "yg", "yf", "ye", "yd", "yc", "yb", "ya", "xz", "xy", "xx", "xw", "xv", "xu", "xt", "xs", "xr", "xq", "xp", "xo", "xn", "xm", "xl", "xk", "xj", "xi", "xh", "xg", "xf", "xe", "xd", "xc", "xb", "xa", "wz", "wy", "wx", "ww", "wv", "wu", "wt", "ws", "wr", "wq", "wp", "wo", "wn", "wm", "wl", "wk", "wj", "wi", "wh", "wg", "wf", "we", "wd", "wc", "wb", "wa", "vz", "vy", "vx", "vw", "vv", "vu", "vt", "vs", "vr", "vq", "vp", "vo", "vn", "vm", "vl", "vk", "vj", "vi", "vh", "vg", "vf", "ve", "vd", "vc", "vb", "va", "uz", "uy", "ux", "uw", "uv", "uu", "ut", "us", "ur", "uq", "up", "uo", "un", "um", "ul", "uk", "uj", "ui", "uh", "ug", "uf", "ue", "ud", "uc", "ub", "ua", "tz", "ty", "tx", "tw", "tv", "tu", "tt", "ts", "tr", "tq", "tp", "to", "tn", "tm", "tl", "tk", "tj", "ti", "th", "tg", "tf", "te", "td", "tc", "tb", "ta", "sz", "sy", "sx", "sw", "sv", "su", "st", "ss", "sr", "sq", "sp", "so", "sn", "sm", "sl", "sk", "sj", "si", "sh", "sg", "sf", "se", "sd", "sc", "sb", "sa", "rz", "ry", "rx", "rw", "rv", "ru", "rt", "rs", "rr", "rq", "rp", "ro", "rn", "rm", "rl", "rk", "rj", "ri", "rh", "rg", "rf", "re", "rd", "rc", "rb", "ra", "qz", "qy", "qx", "qw", "qv", "qu", "qt", "qs", "qr", "qq", "qp", "qo", "qn", "qm", "ql", "qk", "qj", "qi", "qh", "qg", "qf", "qe", "qd", "qc", "qb", "qa", "pz", "py", "px", "pw", "pv", "pu", "pt", "ps", "pr", "pq", "pp", "po", "pn", "pm", "pl", "pk", "pj", "pi", "ph", "pg", "pf", "pe", "pd", "pc", "pb", "pa", "oz", "oy", "ox", "ow", "ov", "ou", "ot", "os", "or", "oq", "op", "oo", "on", "om", "ol", "ok", "oj", "oi", "oh", "og", "of", "oe", "od", "oc", "ob", "oa", "nz", "ny", "nx", "nw", "nv", "nu", "nt", "ns", "nr", "nq", "np", "no", "nn", "nm", "nl", "nk", "nj", "ni", "nh", "ng", "nf", "ne", "nd", "nc", "nb", "na", "mz", "my", "mx", "mw", "mv", "mu", "mt", "ms", "mr", "mq", "mp", "mo", "mn", "mm", "ml", "mk", "mj", "mi", "mh", "mg", "mf", "me", "md", "mc", "mb", "ma", "lz", "ly", "lx", "lw", "lv", "lu", "lt", "ls", "lr", "lq", "lp", "lo", "ln", "lm", "ll", "lk", "lj", "li", "lh", "lg", "lf", "le", "ld", "lc", "lb", "la", "kz", "ky", "kx", "kw", "kv", "ku", "kt", "ks", "kr", "kq", "kp", "ko", "kn", "km", "kl", "kk", "kj", "ki", "kh", "kg", "kf", "ke", "kd", "kc", "kb", "ka", "jz", "jy", "jx", "jw", "jv", "ju", "jt", "js", "jr", "jq", "jp", "jo", "jn", "jm", "jl", "jk", "jj", "ji", "jh", "jg", "jf", "je", "jd", "jc", "jb", "ja", "iz", "iy", "ix", "iw", "iv", "iu", "it", "is", "ir", "iq", "ip", "io", "in", "im", "il", "ik", "ij", "ii", "ih", "ig", "if", "ie", "id", "ic", "ib", "ia", "hz", "hy", "hx", "hw", "hv", "hu", "ht", "hs", "hr", "hq", "hp", "ho", "hn", "hm", "hl", "hk", "hj", "hi", "hh", "hg", "hf", "he", "hd", "hc", "hb", "ha", "gz", "gy", "gx", "gw", "gv", "gu", "gt", "gs", "gr", "gq", "gp", "go", "gn", "gm", "gl", "gk", "gj", "gi", "gh", "gg", "gf", "ge", "gd", "gc", "gb", "ga", "fz", "fy", "fx", "fw", "fv", "fu", "ft", "fs", "fr", "fq", "fp", "fo", "fn", "fm", "fl", "fk", "fj", "fi", "fh", "fg", "ff", "fe", "fd", "fc", "fb", "fa", "ez", "ey", "ex", "ew", "ev", "eu", "et", "es", "er", "eq", "ep", "eo", "en", "em", "el", "ek", "ej", "ei", "eh", "eg", "ef", "ee", "ed", "ec", "eb", "ea", "dz", "dy", "dx", "dw", "dv", "du", "dt", "ds", "dr", "dq", "dp", "do", "dn", "dm", "dl", "dk", "dj", "di", "dh", "dg", "df", "de", "dd", "dc", "db", "da", "cz", "cy", "cx", "cw", "cv", "cu", "ct", "cs", "cr", "cq", "cp", "co", "cn", "cm", "cl", "ck", "cj", "ci", "ch", "cg", "cf", "ce", "cd", "cc", "cb", "ca", "bz", "by", "bx", "bw", "bv", "bu", "bt", "bs", "br", "bq", "bp", "bo", "bn", "bm", "bl", "bk", "bj", "bi", "bh", "bg", "bf", "be", "bd", "bc", "bb", "ba", "az", "ay", "ax", "aw", "av", "au", "at", "as", "ar", "aq", "ap", "ao", "an", "am", "al", "ak", "aj", "ai", "ah", "ag", "af", "ae", "ad", "ac", "ab", "aa", "z", "y", "x", "w", "v", "u", "t", "s", "r", "q", "p", "o", "n", "m", "l", "k", "j", "i", "h", "g", "f", "e", "d", "c", "b", "a" ];
  s = i("1t74G");
  const dt = new Map;
  async function mt(t) {
    const n = await st();
    dt.set(n, {
      url: t,
      completed: !1
    });
  }
  async function vt() {
    const t = await st();
    dt.get(t).completed = !0;
  }
  async function yt(t) {
    const n = dt.get(t);
    if (!n || !n.completed) return !1;
    const r = (await e(s).webNavigation.getAllFrames({
      tabId: t
    })).find((t => 0 === t.frameId)), a = !!r && n.url === r.url;
    return dt.delete(t), a;
  }
  async function bt() {
    const t = await X("includeSingleLetterHints"), n = await X("keyboardClicking");
    return {
      free: t && !n ? [ ...pt ] : pt.slice(0, -26),
      assigned: new Map
    };
  }
  async function wt(t) {
    const n = await bt();
    t.free = n.free, t.assigned = n.assigned;
  }
  const _t = new gt;
  async function xt(t, n) {
    return _t.runExclusive((async () => {
      const e = await async function(t) {
        const n = await X("hintsStacks");
        return n.has(t) ? n.get(t) : void 0;
      }(t) ?? await bt(), r = await n(e);
      return await async function(t, n) {
        const e = await X("hintsStacks");
        e.set(t, n), await K("hintsStacks", e);
      }(t, e), r;
    }));
  }
  async function At(t) {
    await xt(t, (async t => {
      await wt(t);
    }));
  }
  async function kt(t, n, r) {
    return xt(t, (async a => {
      await yt(t) && await wt(a);
      const i = a.free.splice(-r, r);
      for (const t of i) a.assigned.set(t, n);
      const o = [ ...a.assigned.keys() ];
      return await e(s).tabs.sendMessage(t, {
        type: "updateHintsInTab",
        hints: o
      }), i;
    }));
  }
  async function jt(t, n, r) {
    return xt(t, (async a => {
      const i = (await e(s).webNavigation.getAllFrames({
        tabId: t
      })).map((t => t.frameId)).filter((t => t !== n)), o = [];
      for (const n of i) {
        const a = await e(s).tabs.sendMessage(t, {
          type: "reclaimHints",
          amount: r - o.length
        }, {
          frameId: n
        });
        if (o.push(...a), o.length === r) break;
      }
      for (const t of o) a.assigned.set(t, n);
      const u = [ ...a.assigned.keys() ];
      return await e(s).tabs.sendMessage(t, {
        type: "updateHintsInTab",
        hints: u
      }), o;
    }));
  }
  async function Tt(t, n, e) {
    await xt(t, (async t => {
      t.free = t.free.filter((t => !e.includes(t)));
      for (const r of e) t.assigned.set(r, n);
    }));
  }
  async function Mt(t, n) {
    await xt(t, (async t => {
      const e = n.filter((n => t.assigned.has(n)));
      t.free.push(...e), t.free.sort(((t, n) => n.length - t.length || n.localeCompare(t)));
      for (const n of e) t.assigned.delete(n);
    }));
  }
  async function Ct(t, n) {
    const e = "string" == typeof n.target ? [ n.target ] : n.target, r = new Map, a = new Map;
    return xt(t, (async t => {
      for (const n of e) {
        const e = t.assigned.get(n);
        if (void 0 !== e) {
          const t = r.get(e);
          t ? t.push(n) : r.set(e, [ n ]);
        }
      }
      for (const [t, e] of r.entries()) {
        const r = void 0 !== n.arg ? n.arg : void 0;
        a.set(t, {
          type: n.type,
          target: e,
          arg: r
        });
      }
      return a;
    }));
  }
  let It = 0;
  const Et = new Set([ "markHintsAsKeyboardReachable", "restoreKeyboardReachableHints", "displayExtraHints", "displayExcludedHints", "displayLessHints", "confirmSelectorsCustomization", "includeOrExcludeMoreSelectors", "includeOrExcludeLessSelectors", "resetCustomSelectors" ]);
  async function St(t, n, r) {
    const a = n ?? await st();
    if ("target" in t) {
      const n = await Ct(a, t);
      if ("directClickElement" === t.type && 1 === t.target.length && 0 === n?.size) return [ {
        name: "typeTargetCharacters"
      } ];
      if (n) {
        const r = Array.from(n).map((async ([n, r]) => (/^scroll.*AtElement$/.test(t.type) && (It = n), 
        e(s).tabs.sendMessage(a, r, {
          frameId: n
        })))), i = await Promise.allSettled(r);
        if (t.type.startsWith("copy")) {
          return i.filter(ot).filter((t => t.value)).map((t => t.value)).join("\n");
        }
        return 1 === i.length && ot(i[0]) && i[0].value ? i[0].value : void 0;
      }
    } else if (/^scroll.*AtElement$/.test(t.type)) return e(s).tabs.sendMessage(a, t, {
      frameId: It
    });
    return r = r ?? Et.has(t.type) ? void 0 : 0, t.frameId = r, e(s).tabs.sendMessage(a, t, {
      frameId: r
    });
  }
  async function zt() {
    await vt(), e(s).webNavigation.onCompleted.removeListener(zt);
  }
  function Ot() {
    e(s).webNavigation.onCommitted.addListener((async ({tabId: t, frameId: n, url: r}) => {
      if (0 !== n) return;
      if (!await e(s).tabs.get(t)) {
        await mt(r);
        e(s).webNavigation.onCompleted.hasListener(zt) || e(s).webNavigation.onCompleted.addListener(zt);
      } else e(s).webNavigation.onCompleted.removeListener(zt), await At(t);
    })), e(s).webNavigation.onCompleted.addListener((async ({tabId: t, frameId: n}) => {
      if (!!await e(s).tabs.get(t)) try {
        await St({
          type: "onCompleted",
          frameId: n
        }, t, n);
      } catch (t) {
        console.error(t);
      }
    }));
  }
  s = i("1t74G"), s = i("1t74G");
  const Rt = e(s = i("1t74G")).action ? e(s).action : e(s).browserAction;
  async function qt() {
    const t = await X("keyboardClicking") ? at.iconKeyboard48.pathname : at.icon48.pathname;
    Rt.setIcon({
      path: t
    });
  }
  async function Lt() {
    const t = await X("keyboardClicking");
    await K("keyboardClicking", !t);
  }
  async function Pt() {
    const t = await X("keyboardClicking"), n = e(s).browserAction ? [ "browser_action" ] : [ "action" ];
    e(s).contextMenus.create({
      id: "keyboard-clicking",
      title: "Keyboard Clicking",
      type: "checkbox",
      contexts: n,
      checked: t
    });
  }
  e(s).storage.onChanged.addListener((async t => {
    if ("keyboardClicking" in t) {
      await qt();
      const t = await X("keyboardClicking");
      await e(s).contextMenus.update("keyboard-clicking", {
        checked: t
      });
    }
  }));
  s = i("1t74G");
  const Nt = new gt;
  async function Wt(t) {
    return Nt.runExclusive((async () => {
      const n = await X("tabMarkers") ?? {
        free: [ ...pt ],
        tabIdsToMarkers: new Map,
        markersToTabIds: new Map
      }, e = t(n);
      return await K("tabMarkers", n), e;
    }));
  }
  async function Bt(t) {
    return Wt((({free: n, tabIdsToMarkers: e, markersToTabIds: r}) => {
      const a = e.get(t) ?? n.pop();
      if (!a) throw new Error("No more tab markers available");
      return e.set(t, a), r.set(a, t), a;
    }));
  }
  async function Ft(t) {
    return Wt((({markersToTabIds: n}) => {
      const e = n.get(t);
      if (!e) throw new Error(`No tab with the marker "${t}"`);
      return e;
    }));
  }
  async function Ut() {
    await Wt((t => (t.free = [ ...pt ], t.tabIdsToMarkers = new Map, t.markersToTabIds = new Map, 
    t)));
  }
  async function $t() {
    if (await Ut(), !await X("includeTabMarkers")) return;
    const t = await e(s).tabs.query({});
    await Promise.all(t.filter((t => "unloaded" === t.status)).map((async t => e(s).tabs.reload(t.id))));
  }
  async function Dt() {
    await Ut();
    const t = (await e(s).tabs.query({})).map((async t => {
      try {
        await St({
          type: "refreshTitleDecorations"
        }, t.id);
      } catch {
        return e(s).tabs.reload(t.id);
      }
    }));
    await Promise.allSettled(t);
  }
  function Ht() {
    return !!navigator.vendor && navigator.vendor.includes("Apple");
  }
  e(s).tabs.onRemoved.addListener((async t => {
    await async function(t) {
      const n = await Bt(t);
      await Wt((({free: e, tabIdsToMarkers: r, markersToTabIds: a}) => {
        r.delete(t), a.delete(n), e.push(n), e.sort(((t, n) => n.length - t.length || n.localeCompare(t)));
      }));
    }(t);
  })), e(s).tabs.onReplaced.addListener((async (t, n) => {
    await Wt((({tabIdsToMarkers: e, markersToTabIds: r}) => {
      const a = e.get(n);
      a && (e.delete(n), e.set(t, a), r.set(a, t));
    }));
  }));
  s = i("1t74G");
  const Gt = new gt;
  async function Kt(t, n, e) {
    await Gt.runExclusive((async () => {
      const r = await X("tabsByRecency"), a = r[t] ?? [], i = a.indexOf(n);
      -1 !== i && a.splice(i, 1), e || a[a.length - 1] === n || a.push(n), r[t] = a, await K("tabsByRecency", r);
    }));
  }
  async function Zt() {
    const t = await ut();
    t.windowId && t.id && await Kt(t.windowId, t.id, !1), e(s).tabs.onActivated.addListener((async t => {
      await Kt(t.windowId, t.tabId, !1);
    })), e(s).tabs.onRemoved.addListener((async (t, n) => {
      await Kt(n.windowId, t, !0);
    }));
  }
  async function Jt() {
    await K("hintsStacks", new Map);
  }
  async function Xt() {
    e(s).runtime.onInstalled.addListener((async ({reason: t, previousVersion: n}) => {
      if ("install" !== t && "update" !== t) return;
      await qt(), await Pt();
      let r;
      await X("switchedToSyncStorage") || await async function() {
        let t;
        for (t in N) if (Object.prototype.hasOwnProperty.call(N, t) && await Z(t, !1)) {
          const n = await X(t, !1);
          await K(t, n);
        }
        const n = await X("hintsToggle");
        if (n) {
          const t = n.global, e = new Map(n.hosts), r = new Map(n.paths), a = new Map(n.tabs);
          await K("hintsToggleGlobal", t), await K("hintsToggleHosts", e), await K("hintsTogglePaths", r), 
          await K("hintsToggleTabs", a);
        }
        await K("switchedToSyncStorage", !0);
      }();
      const a = [];
      for (r in N) Object.prototype.hasOwnProperty.call(N, r) && a.push(J(r, N[r]));
      if (await Promise.all(a), "install" === t && await e(s).tabs.create({
        url: at.onboarding.href
      }), "update" === t && await X("showWhatsNewPageOnUpdate")) {
        const t = e(s).runtime.getManifest().version, [r, a] = t.split("."), [i, o] = n.split(".");
        r === i && a === o || await e(s).tabs.create({
          url: at.whatsNewPage.href
        });
      }
      await J("hintsToggleTabs", new Map), await J("tabsByRecency", {}), await Jt(), "install" === t && (await $t(), 
      await Zt());
    })), e(s).runtime.onStartup.addListener((async () => {
      await $t(), await Jt(), await qt(), Ht() && await Pt(), await K("hintsToggleTabs", new Map), 
      await K("tabsByRecency", {}), await Zt();
    }));
    await X("tabsByRecency") && await Zt(), Ot();
  }
  async function Vt() {
    const t = await X("hintsToggleGlobal");
    await K("hintsToggleGlobal", !t);
  }
  async function Yt(t, n) {
    const e = await ut();
    it(e.url);
    const {host: r, origin: a, pathname: i} = new URL(e.url);
    switch (t) {
     case "everywhere":
      void 0 === n && (await K("hintsToggleGlobal", !0), await K("hintsToggleTabs", new Map), 
      await K("hintsToggleHosts", new Map), await K("hintsTogglePaths", new Map), await St({
        type: "updateNavigationToggle",
        enable: n
      }));
      break;

     case "now":
      await St({
        type: "updateNavigationToggle",
        enable: n
      });
      break;

     case "global":
      await K("hintsToggleGlobal", void 0 === n || n);
      break;

     case "tab":
      {
        const t = await X("hintsToggleTabs");
        it(e.id), void 0 === n ? t.delete(e.id) : t.set(e.id, n), await K("hintsToggleTabs", t);
        break;
      }

     case "host":
      {
        const t = await X("hintsToggleHosts");
        r && (void 0 === n ? t.delete(r) : t.set(r, n)), await K("hintsToggleHosts", t);
        break;
      }

     case "page":
      {
        const t = await X("hintsTogglePaths");
        a && i && (void 0 === n ? t.delete(a + i) : t.set(a + i, n)), await K("hintsTogglePaths", t);
        break;
      }
    }
  }
  async function Qt(t) {
    return Promise.allSettled([ t ]).then((([t]) => ot(t) ? [ t.value, void 0 ] : [ void 0, t.reason ]));
  }
  function tn(t) {
    for (const n of t) "typeTargetCharacters" === n.name && (n.previousName = "noHintFound");
    let n, e;
    return 1 === t.length && (n = t[0]), t.length > 1 && (n = t.find((t => t.main))), 
    n ? (e = {
      type: "previousName" in n ? n.previousName : n.name
    }, "key" in n && (e.key = n.key), "textToCopy" in n && (e.key = n.textToCopy)) : e = {
      type: "noAction"
    }, {
      type: "response",
      action: e,
      actions: t
    };
  }
  s = i("1t74G"), s = i("1t74G");
  async function nn(t, n) {
    if (await X("enableNotifications")) try {
      await St({
        type: "displayToastNotification",
        text: t,
        options: n
      });
    } catch {
      e(s).notifications.create("rango-notification", {
        type: "basic",
        iconUrl: at.icon128.href,
        title: "Rango",
        message: t
      });
    }
  }
  async function en() {
    await nn("This command has been removed. Update rango-talon and use the command 'rango settings' to open the settings page.", {
      type: "warning",
      autoClose: 8e3
    });
  }
  s = i("1t74G");
  async function rn(t, n) {
    const r = await e(s).tabs.query({
      currentWindow: !0
    }), a = await ut(), i = await st();
    let o;
    switch (t) {
     case "other":
      o = t => t.id !== i;
      break;

     case "left":
      o = t => t.index < a.index;
      break;

     case "right":
      o = t => t.index > a.index;
      break;

     case "leftEnd":
      it(n), o = t => t.index < n;
      break;

     case "rightEnd":
      it(n), o = t => t.index >= r.length - n;
      break;

     case "previous":
      it(n), o = t => t.index >= a.index - n && t.index < a.index;
      break;

     case "next":
      it(n), o = t => t.index > a.index && t.index <= a.index + n;
    }
    const u = r.filter((t => o(t))).map((t => t.id)).filter((t => "number" == typeof t));
    await e(s).tabs.remove(u);
  }
  s = i("1t74G");
  async function an() {
    const t = await X("tabsByRecency"), n = await e(s).windows.getCurrent();
    it(n.id);
    const r = t[n.id];
    it(r);
    const a = r[r.length - 2];
    a && await e(s).tabs.update(a, {
      active: !0
    });
  }
  s = i("1t74G");
  async function on(t) {
    const n = await async function(t) {
      const n = new Map;
      for (const r of t) {
        const t = await Ft(r), a = await e(s).tabs.get(t);
        a.windowId && !n.has(a.windowId) && n.set(a.windowId, a);
      }
      return Array.from(n.values());
    }(t);
    for (const [t, r] of n.entries()) await e(s).tabs.update(r.id, {
      active: !0
    }), 0 === t ? await e(s).windows.update(r.windowId, {
      focused: !0
    }) : r.discarded && await e(s).tabs.reload(r.id);
  }
  async function un(t, n) {
    it(t.url), await nn("Copied to the clipboard", {
      type: "success"
    });
    return new URL(t.url)[n];
  }
  async function sn(t) {
    let [n] = await Qt(St({
      type: "getTitleBeforeDecoration"
    }));
    return n ??= t.title, it(t.url), it(n), await nn("Copied to the clipboard", {
      type: "success"
    }), `[${n}](${t.url})`;
  }
  async function cn(t) {
    const [n] = await Qt(ut()), r = n?.id;
    switch (t.type) {
     case "activateTab":
      await on(t.target);
      break;

     case "historyGoBack":
      try {
        await St(t);
      } catch {
        await e(s).tabs.goBack();
      }
      break;

     case "historyGoForward":
      try {
        await St(t);
      } catch {
        await e(s).tabs.goForward();
      }
      break;

     case "toggleHints":
      await Vt();
      break;

     case "enableHints":
      await Yt(t.arg, !0);
      break;

     case "disableHints":
      await Yt(t.arg, !1);
      break;

     case "resetToggleLevel":
      await Yt(t.arg);
      break;

     case "toggleKeyboardClicking":
      await Lt();
      break;

     case "includeSingleLetterHints":
     case "excludeSingleLetterHints":
     case "setHintStyle":
     case "setHintWeight":
     case "enableUrlInTitle":
     case "disableUrlInTitle":
      await en();
      break;

     case "increaseHintSize":
      {
        const t = await X("hintFontSize");
        await K("hintFontSize", t + 1);
        break;
      }

     case "decreaseHintSize":
      {
        const t = await X("hintFontSize");
        await K("hintFontSize", t - 1);
        break;
      }

     case "closeOtherTabsInWindow":
      await rn("other");
      break;

     case "closeTabsToTheLeftInWindow":
      await rn("left");
      break;

     case "closeTabsToTheRightInWindow":
      await rn("right");
      break;

     case "closeTabsLeftEndInWindow":
      await rn("leftEnd", t.arg);
      break;

     case "closeTabsRightEndInWindow":
      await rn("rightEnd", t.arg);
      break;

     case "closePreviousTabsInWindow":
      await rn("previous", t.arg);
      break;

     case "closeNextTabsInWindow":
      await rn("next", t.arg);
      break;

     case "cloneCurrentTab":
      r && await e(s).tabs.duplicate(r);
      break;

     case "moveCurrentTabToNewWindow":
      await e(s).windows.create({
        tabId: r
      });
      break;

     case "focusPreviousTab":
      await an();
      break;

     case "copyLocationProperty":
      if (n) return un(n, t.arg);
      break;

     case "copyCurrentTabMarkdownUrl":
      if (n) return sn(n);
      break;

     case "openSettingsPage":
      await e(s).runtime.openOptionsPage();
      break;

     case "openPageInNewTab":
      await e(s).tabs.create({
        url: t.arg
      });
      break;

     case "refreshTabMarkers":
      await Dt();
    }
  }
  const ln = new Set([ "toggleHints", "enableHints", "disableHints", "resetToggleLevel", "increaseHintSize", "decreaseHintSize", "setHintStyle", "setHintWeight", "copyLocationProperty", "copyCurrentTabMarkdownUrl", "enableUrlInTitle", "disableUrlInTitle", "excludeSingleLetterHints", "includeSingleLetterHints", "closeOtherTabsInWindow", "closeTabsToTheLeftInWindow", "closeTabsToTheRightInWindow", "closeTabsLeftEndInWindow", "closeTabsRightEndInWindow", "closePreviousTabsInWindow", "closeNextTabsInWindow", "cloneCurrentTab", "toggleKeyboardClicking", "moveCurrentTabToNewWindow", "focusPreviousTab", "historyGoBack", "historyGoForward", "openSettingsPage", "openPageInNewTab", "activateTab", "refreshTabMarkers" ]);
  async function fn(t) {
    const n = await (ln.has(t.type) ? cn(t) : St(t));
    if ("string" == typeof n) return tn([ {
      name: "copyToClipboard",
      textToCopy: n
    } ]);
    if (n) {
      const t = n.findIndex((t => "focusPage" === t.name));
      if (-1 !== t) {
        await St({
          type: "checkIfDocumentHasFocus"
        }) && n.splice(t, 1);
      }
    }
    return tn(n ?? []);
  }
  s = i("1t74G");
  async function hn() {
    if (Ht()) {
      return (await e(s).runtime.sendNativeMessage("", {
        request: "getTextFromClipboard"
      })).textFromClipboard;
    }
    return navigator.clipboard ? navigator.clipboard.readText() : async function() {
      return await chrome.offscreen.hasDocument() && await chrome.offscreen.closeDocument(), 
      await chrome.offscreen.createDocument({
        url: at.offscreenDocument.href,
        reasons: [ chrome.offscreen.Reason.CLIPBOARD ],
        justification: "Read the request from Talon from the clipboard"
      }), chrome.runtime.sendMessage({
        type: "read-clipboard",
        target: "offscreen-doc"
      });
    }();
  }
  async function gn() {
    const t = await hn();
    let n;
    if (t) try {
      return n = JSON.parse(t), "request" !== n.type && console.error('Error: The message present in the clipboard is not of type "request"'), 
      n;
    } catch (t) {
      t instanceof SyntaxError && console.error(t);
    } else await nn("Unable to read the request present on the clipboard", {
      type: "error"
    });
  }
  async function pn(t) {
    const n = JSON.stringify(t);
    if (navigator.clipboard) {
      if (!Ht()) return navigator.clipboard.writeText(n);
      {
        const t = document.querySelector("#copy-paste-area") ?? document.createElement("textarea");
        if (t.id = "copy-paste-area", document.body.append(t), t instanceof HTMLTextAreaElement) return t.value = n, 
        t.select(), document.execCommand("copy"), void (t.value = "");
      }
    }
    return async function(t) {
      await chrome.offscreen.hasDocument() && await chrome.offscreen.closeDocument(), 
      await chrome.offscreen.createDocument({
        url: at.offscreenDocument.href,
        reasons: [ chrome.offscreen.Reason.CLIPBOARD ],
        justification: "Write the response to Talon to the clipboard"
      }), await chrome.runtime.sendMessage({
        type: "copy-to-clipboard",
        target: "offscreen-doc",
        text: t
      });
    }(n);
  }
  let dn = !1;
  async function mn() {
    await St({
      type: "tryToFocusPage"
    });
    const [t] = await Qt(St({
      type: "checkIfDocumentHasFocus"
    }));
    return !t && !dn && (dn = !0, setTimeout((() => {
      dn = !1;
    }), 3e3), !0);
  }
  s = i("1t74G");
  async function vn() {
    const t = await st(), n = (await e(s).webNavigation.getAllFrames({
      tabId: t
    })).map((async n => e(s).tabs.sendMessage(t, {
      type: "checkActiveElementIsEditable"
    }, {
      frameId: n.frameId
    })));
    return (await Promise.all(n)).includes(!0);
  }
  let yn = !1;
  async function bn() {
    await pn({
      type: "response",
      action: {
        type: "noHintFound"
      },
      actions: [ {
        name: "typeTargetCharacters"
      } ]
    });
  }
  async function wn(t) {
    if ("directClickElement" !== t.action.type) throw new Error("This function is only to be called with a directClickElement request");
    if (t.action.target.length > 1) return !1;
    if (!await X("directClickWithNoFocusedDocument")) {
      const [t] = await Qt(St({
        type: "checkIfDocumentHasFocus"
      }));
      if (!t) return await bn(), !0;
    }
    return !(await X("directClickWhenEditing") || !await vn()) && (await bn(), !0);
  }
  async function _n() {
    try {
      const t = await gn();
      if (!t) return;
      if (yn = !("requestTimedOut" === t.action.type), "directClickElement" === t.action.type) {
        if (await wn(t)) return;
      }
      if (("setSelectionAfter" === t.action.type || "setSelectionBefore" === t.action.type || "tryToFocusElementAndCheckIsEditable" === t.action.type) && await mn()) {
        const t = tn([ {
          name: "focusPageAndResend"
        } ]);
        return void await pn(t);
      }
      const n = await fn(t.action);
      yn && (await pn(n), yn = !1);
    } catch (t) {
      t instanceof Error && (console.error(t), await nn(t.message, {
        type: "error"
      }));
    }
  }
  s = i("1t74G"), s = i("1t74G");
  async function xn(t, n) {
    if (n && t.length > 1) throw new Error("Can't make more than one tab active");
    const r = await ut();
    let a;
    const i = await X("newTabPosition");
    if ("relatedAfterCurrent" === i) {
      const t = (await e(s).tabs.query({
        currentWindow: !0
      })).filter((t => t.openerTabId === r.id)).pop();
      a = t ? t.index + 1 : r.index + 1;
    }
    "afterCurrent" === i && (a = r.index + 1), "atEnd" === i && (a = 99999);
    try {
      await Promise.all(t.map((async t => e(s).tabs.create({
        url: t,
        active: n,
        index: a ? a++ : void 0,
        openerTabId: r.id
      }))));
    } catch (t) {
      console.error(t);
    }
  }
  var An = {};
  function kn(t, n) {
    if (n) return t;
    throw new Error("Unhandled discriminated union member: " + JSON.stringify(t));
  }
  Object.defineProperty(An, "__esModule", {
    value: !0
  }), An.assertNever = kn, An.default = kn;
  var jn = i("jE1ev");
  const Tn = new Map;
  async function Mn(t, n) {
    const e = function(t) {
      if (Tn.has(t)) return Tn.get(t);
      const n = new gt;
      return Tn.set(t, n), n;
    }(t);
    return e.runExclusive((async () => {
      const e = await X(t), r = await n(e);
      return await K(t, e), r;
    }));
  }
  let Cn = !1;
  const In = new Set;
  let En, Sn;
  const zn = {
    store: {
      success: "Custom selectors saved",
      fail: "No selectors to save"
    },
    reset: {
      success: "Custom selectors reset",
      fail: "No custom selectors for the current page"
    }
  }, On = (0, jn.debounce)((async t => {
    const n = Cn ? zn[t].success : zn[t].fail, e = Cn ? "success" : "warning";
    await nn(n, {
      type: e
    }), Cn = !1, In.clear(), Sn && (Sn(), Sn = void 0, En = void 0);
  }), 200);
  async function Rn(t, n, r) {
    const a = await Mn("customSelectors", (async a => {
      const i = a.get(n) ?? {
        include: [],
        exclude: []
      };
      if ("store" === t) {
        if (!r) throw new Error("No selectors provided to store");
        return i.include = Array.from(new Set([ ...i.include, ...r.include ])), i.exclude = Array.from(new Set([ ...i.exclude, ...r.exclude ])), 
        a.set(n, i), [ ...r.include, ...r.exclude ];
      }
      return "reset" === t ? (a.delete(n), i ? [ ...i.include, ...i.exclude ] : []) : e(An)(t);
    }));
    a.length > 0 && (Cn = !0);
    for (const t of a) In.add(t);
    await On(t), En || (En = new Promise((t => {
      Sn = t;
    }))), await En;
  }
  async function qn(t, n) {
    await Rn("store", t, n);
  }
  async function Ln(t) {
    await Rn("reset", t);
  }
  e(s).contextMenus.onClicked.addListener((async function({menuItemId: t}) {
    "keyboard-clicking" === t && await Lt();
  })), (async () => {
    await Xt();
  })(), e(s).runtime.onMessage.addListener((async function(t, n) {
    it(n.tab);
    const r = n.tab.id, a = await e(s).windows.getLastFocused(), i = n.tab.active && n.tab.windowId === a.id, o = await st();
    it(r);
    const u = n.frameId ?? 0;
    switch (t.type) {
     case "initStack":
      return 0 !== u ? void console.warn("Ignoring request to initiate stack that doesn't come from the main frame") : At(r);

     case "claimHints":
      return kt(r, u, t.amount);

     case "reclaimHintsFromOtherFrames":
      return jt(r, u, t.amount);

     case "releaseHints":
      return Mt(r, t.hints);

     case "storeHintsInFrame":
      return Tt(r, u, t.hints);

     case "getHintsStackForTab":
      return xt(r, (async t => t));

     case "openInNewTab":
      await xn([ t.url ], !0);
      break;

     case "openInBackgroundTab":
      await xn(t.links, !1);
      break;

     case "getContentScriptContext":
      return {
        tabId: r,
        frameId: u,
        currentTabId: o
      };

     case "clickHintInFrame":
      await St({
        type: "clickElement",
        target: [ t.hint ]
      });
      break;

     case "markHintsAsKeyboardReachable":
      await St({
        type: "markHintsAsKeyboardReachable",
        letter: t.letter
      }, r);
      break;

     case "restoreKeyboardReachableHints":
      await St({
        type: "restoreKeyboardReachableHints"
      }, r);
      break;

     case "isCurrentTab":
      return i;

     case "getTabMarker":
      return Bt(r);

     case "storeCustomSelectors":
      await qn(t.pattern, t.selectors);
      break;

     case "resetCustomSelectors":
      return Ln(t.pattern);

     default:
      throw console.error(t), new Error("Bad request to background script");
    }
  })), Rt.onClicked.addListener((async () => {
    await Vt();
  })), e(s).commands.onCommand.addListener((async t => {
    try {
      await St({
        type: "allowToastNotification"
      });
    } catch {}
    "get-talon-request" !== t && "get-talon-request-alternative" !== t || await _n(), 
    "toggle-hints" === t && await Vt(), "disable-hints" === t && await Yt("global", !1), 
    "enable-hints" === t && await Yt("global", !0), "toggle-keyboard-clicking" === t && await Lt();
  }));
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
